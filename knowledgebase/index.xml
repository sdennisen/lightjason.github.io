<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Knowledgebases on LightJason</title>
    <link>https://lightjason.github.io/knowledgebase/index.xml</link>
    <description>Recent content in Knowledgebases on LightJason</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="https://lightjason.github.io/knowledgebase/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Basic Knowledge: Actions</title>
      <link>https://lightjason.github.io/knowledgebase/actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/actions/</guid>
      <description>&lt;p&gt;This text gives you an overview over the main build-in actions in LightJason/AgentSpeak(L++).&lt;/p&gt;

&lt;p&gt;All actions are organised within the &lt;a href=&#34;http://lightjason.github.io/AgentSpeak/sources/d8/da4/namespaceorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin.html&#34;&gt;action.buildin&lt;/a&gt; package. Each packages defines a semantic structure of the actions.
For an example on how to make use of actions have a look at our &lt;a href=&#34;https://github.com/LightJason/AgentSpeak/blob/master/src/test/resources/agent/complete.asl&#34;&gt;testing agent&lt;/a&gt; which uses many built-in actions provided by AgentSpeak(L++).&lt;/p&gt;

&lt;h2 id=&#34;collection&#34;&gt;collection&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/dc6/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1CSize.html&#34;&gt;collection/size&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the size of the collection.&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;collection/list&#34;&gt;collection/list&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d97/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CRange.html&#34;&gt;collection/list/range&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a list with a integer ranged list.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates a list of integer values within the range $ [\text{argument 1}, \text{argument 2}) $  &lt;pre&gt;&lt;code&gt;L=collection/list/create(0,10);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/ded/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CSymmetricDifference.html&#34;&gt;collection/list/symmetricdifference&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the symmetric difference between lists (difference of union and intersection).&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates the symmetric difference of all arguments, so all arguments are collections and the action will return a list with the symmetric difference $ (\mathbb{X} \setminus \mathbb{Y}) \cup (\mathbb{B} \setminus \mathbb{A}) $  &lt;pre&gt;&lt;code&gt;D=collection/list/symmetricdifference([1,2,[3,4]],[7,8,9,4],[[1,2],[3]]);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Symmetric_difference&#34; /&gt;https://en.wikipedia.org/wiki/Symmetric_difference&lt;/a&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d4f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CGet.html&#34;&gt;collection/list/get&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns an element of the list by the index.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The first argument is a list and the second an index, so the action returns the element &lt;pre&gt;&lt;code&gt;V=collection/list/get(L,2);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/dd9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CFlatConcat.html&#34;&gt;collection/list/flatconcat&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a flat concated list of any term data.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The arguments of this action are nested lists and the action transfer all nested structures to a straight list &lt;pre&gt;&lt;code&gt;F=collection/list/flatconcat([1,2,[3,4]],[[1,2],[7,8]]);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/dff/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CZip.html&#34;&gt;collection/list/zip&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a list of tuples with elements of two lists.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates list of tupels of both list arguments $ \mathbb{X} $ and $ \mathbb{Y} $ and returns a list of $ \langle x_i, y_i \rangle $  &lt;pre&gt;&lt;code&gt;T=collection/list/zip([1,,3,5,7],[2,4,6,8]);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d8f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CIntersect.html&#34;&gt;collection/list/intersect&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the intersection between lists.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments are lists and the action returns the intersection $ \cap M_i \forall i \in \mathbb{N} $  &lt;pre&gt;&lt;code&gt;I=collection/list/intersect([1,2,[3,4]],[3,4,[8,9]],[1,2,3,5]);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/dd3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CCreate.html&#34;&gt;collection/list/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a list.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates a list of the arguments, so each argument of the action is put to the list, is the argument empty an empty-list object will be returned &lt;pre&gt;&lt;code&gt;L=collection/list/create(&#34;a&#34;,1,&#34;b&#34;,2);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/de9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CIsEmpty.html&#34;&gt;collection/list/isempty&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;checks a list if empty.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Concats all list arguments (and removes the nested structures) and returns a boolean of the empty check &lt;pre&gt;&lt;code&gt;E=collection/list/isempty([]);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d6c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CUnion.html&#34;&gt;collection/list/union&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the union between lists (not unique).&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates the union of all arguemnts with removing nested structures $ \cup X_i \forall i \in \mathbb{N} $  &lt;pre&gt;&lt;code&gt;U=collection/list/union(L,[1,2],[3,4,[5,6]];
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d89/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CSet.html&#34;&gt;collection/list/set&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds an element to the list.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Sets an element within the list by index, the first argument is the list object, the second the index value and third the new value of the element &lt;pre&gt;&lt;code&gt;collection/list/set(L,2,&#34;astringvalue&#34;);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d71/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CReverse.html&#34;&gt;collection/list/reverse&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;reverses a list.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments of the action are lists and the action will remove nested structures and reverse all elements in a single list &lt;pre&gt;&lt;code&gt;R=collection/list/reverse(L,[1,2],[3,4,[7,8]]);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d45/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CComplement.html&#34;&gt;collection/list/complement&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the complement between lists.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;The action uses two input arguments $ \mathbb{A} $ and $ \mathbb{B} $ and returns a list of all elements which contains $ \mathbb{A} \setminus \mathbb{B} $  &lt;pre&gt;&lt;code&gt;L=collection/list/complement([1,2,3],[3,4,5]);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d46/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CUnique.html&#34;&gt;collection/list/unique&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns an unique list of the list.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;All arguments are collections and the action removes nested structures and returns a list with unique elements &lt;pre&gt;&lt;code&gt;U=collection/list/unique(L);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d0c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CSubList.html&#34;&gt;collection/list/sublist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a sublist within the index range.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Creates a sublist of an existing list by an index range, first argument is the list object, second the lower-bound, third the upper-bound within the range $ [ \text{lower-bound}, \text{upper-bound} ) $  &lt;pre&gt;&lt;code&gt;LS=collection/list/get(L,2,5);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/dcf/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1list_1_1CRemove.html&#34;&gt;collection/list/remove&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns an element of the list by the index.&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;Description&lt;/dt&gt;&lt;dd&gt;Removes an element by the list index, the first argument is the list object, the second argument is the index &lt;pre&gt;&lt;code&gt;collection/list/remove(L,3);
&lt;/code&gt;&lt;/pre&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;collection/map&#34;&gt;collection/map&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d36/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CRemove.html&#34;&gt;collection/map/remove&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;removes an element of the map&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d69/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CCreate.html&#34;&gt;collection/map/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a hashmap&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/dfb/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CValues.html&#34;&gt;collection/map/values&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns all values of the map&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/dd0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CPut.html&#34;&gt;collection/map/put&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds an element to the map&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d21/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CGet.html&#34;&gt;collection/map/get&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns an element of the map by its key value&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/de2/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CKeys.html&#34;&gt;collection/map/keys&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns all key values of the map&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/de3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1map_1_1CPutIfAbsent.html&#34;&gt;collection/map/putifabsent&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds an element to the map iif not exists&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;collection/multimap&#34;&gt;collection/multimap&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/df7/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1multimap_1_1CAsMap.html&#34;&gt;collection/multimap/asmap&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the multimap as map&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d91/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1multimap_1_1CGet.html&#34;&gt;collection/multimap/get&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;get a element-list of the multimap by key&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d29/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1multimap_1_1CCreate.html&#34;&gt;collection/multimap/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a multi-hashmap&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;collection/tuple&#34;&gt;collection/tuple&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d1e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1tuple_1_1CFlat.html&#34;&gt;collection/tuple/flat&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;unflats the tuple into variables&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d2e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1collection_1_1tuple_1_1CCreate.html&#34;&gt;collection/tuple/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a tuple of two elements&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;crypto&#34;&gt;crypto&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d78/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1crypto_1_1CEncrypt.html&#34;&gt;crypto/encrypt&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;encrypting algorithm&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d80/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1crypto_1_1CCreateKey.html&#34;&gt;crypto/createkey&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates an encrypting / decrypting key pair&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d6a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1crypto_1_1CDecrypt.html&#34;&gt;crypto/decrypt&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;dencrypting algorithm&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/df5/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1crypto_1_1CHash.html&#34;&gt;crypto/hash&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;hash algorithm&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#MessageDigest&#34; /&gt;http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#MessageDigest&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://github.com/google/guava/wiki/HashingExplained&#34; /&gt;https://github.com/google/guava/wiki/HashingExplained&lt;/a&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;generic&#34;&gt;generic&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d8b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1CThrow.html&#34;&gt;generic/throw&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for throwing a runtime execption&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/dc7/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1CPrint.html&#34;&gt;generic/print&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for sum of elements&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;generic/agent&#34;&gt;generic/agent&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/ddb/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1agent_1_1CPlanList.html&#34;&gt;generic/agent/planlist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to get plan-information as a map with string with literal of plan-literal as tupel of successful and failed plans&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/de7/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1agent_1_1CBeliefList.html&#34;&gt;generic/agent/belieflist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a list of all belief literals&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/dc7/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1agent_1_1CSleep.html&#34;&gt;generic/agent/sleep&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;sets the agent to the sleep state for an infinity or fixed time&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/da0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1agent_1_1CCreateLiteral.html&#34;&gt;generic/agent/createliteral&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a literal by the input data&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d3f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1agent_1_1CClearBeliefbase.html&#34;&gt;generic/agent/clearbeliefbase&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;clears all elements from the beliefbase&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;generic/datetime&#34;&gt;generic/datetime&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/df0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1datetime_1_1CCycleTime.html&#34;&gt;generic/datetime/cycletime&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to get time in nanoseconds to the last cycle call&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d43/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1datetime_1_1CTime.html&#34;&gt;generic/datetime/time&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for getting the current time&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d34/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1datetime_1_1CDate.html&#34;&gt;generic/datetime/date&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for getting the current date&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d58/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1datetime_1_1CDateTime.html&#34;&gt;generic/datetime/datetime&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create a date-time structure&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;generic/storage&#34;&gt;generic/storage&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/dfd/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1storage_1_1CRemove.html&#34;&gt;generic/storage/remove&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;removes an element by name from the agent-storage&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d01/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1storage_1_1CClear.html&#34;&gt;generic/storage/clear&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;removes all elements of the storage which are not forbidden&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d69/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1storage_1_1CAdd.html&#34;&gt;generic/storage/add&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;adds or overwrites an element in the agent-storage&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/dc2/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1storage_1_1CExists.html&#34;&gt;generic/storage/exists&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;check if an element exists within the agent-storage&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;generic/string&#34;&gt;generic/string&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d1f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CLower.html&#34;&gt;generic/string/lower&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create a lower-case string&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d45/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CContains.html&#34;&gt;generic/string/contains&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check string for a substring&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d5c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CStartsWith.html&#34;&gt;generic/string/startswith&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check string for starts-with&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d96/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CReplace.html&#34;&gt;generic/string/replace&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to replace any occurence within a string&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d12/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CReverse.html&#34;&gt;generic/string/reverse&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to reverse a string&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d21/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CEndsWith.html&#34;&gt;generic/string/endswith&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check string for starts-with&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d01/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CUpper.html&#34;&gt;generic/string/upper&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create an upper-case string&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/dad/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CBase64Encode.html&#34;&gt;generic/string/base64encode&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to encodes a string with Base64&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Base64&#34; /&gt;https://en.wikipedia.org/wiki/Base64&lt;/a&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d0e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CBase64Decode.html&#34;&gt;generic/string/base64decode&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to encodes a string with Base64&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Base64&#34; /&gt;https://en.wikipedia.org/wiki/Base64&lt;/a&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/dad/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CConcat.html&#34;&gt;generic/string/concat&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to concat strings&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d4f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CSize.html&#34;&gt;generic/string/size&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to get the string length&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d1c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1string_1_1CRandom.html&#34;&gt;generic/string/random&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create a random string&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;generic/type&#34;&gt;generic/type&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d3c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CParseInt.html&#34;&gt;generic/type/parseint&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for parsing an integer from string&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d61/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CIsNumeric.html&#34;&gt;generic/type/isnumeric&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check if a type is a number&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/de2/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CToString.html&#34;&gt;generic/type/tostring&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to convert any data to its string representation&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d1c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CIs.html&#34;&gt;generic/type/is&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check if a type is a class&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/df4/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CToInt.html&#34;&gt;generic/type/toint&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to cast a vale to an integral value&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/d00/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CIsString.html&#34;&gt;generic/type/isstring&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to check if a type is a string&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d99/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CParseFloat.html&#34;&gt;generic/type/parsefloat&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for parsing a float from string&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/db0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CToFloat.html&#34;&gt;generic/type/tofloat&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to cast a vale to an floating-point value&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d70/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CParseLiteral.html&#34;&gt;generic/type/parseliteral&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for parsing a literal from string&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/dcd/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1generic_1_1type_1_1CTo.html&#34;&gt;generic/type/to&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to cast any java object type&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math&#34;&gt;math&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/dbd/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CTanh.html&#34;&gt;math/tanh&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for tangens hyperbolic value $ tanh( x_i ) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/d5d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CCos.html&#34;&gt;math/cos&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for cosinus value $ cos( x_i ) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/dc3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CMaxIndex.html&#34;&gt;math/maxindex&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for index of maximum&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d8f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CATan.html&#34;&gt;math/atan&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for tangens value $ tan( x_i ) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d61/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CStirling.html&#34;&gt;math/stirling&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calculating stirling number $ S(n,k) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/df0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CAbs.html&#34;&gt;math/abs&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for absolute value $ \lvert x_i \rvert $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/dca/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CLog10.html&#34;&gt;math/log10&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for logarithm (base 10) value $ log_{10} x_i $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d08/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CACos.html&#34;&gt;math/acos&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for arc cosinus value $ cos( x_i ) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d0c/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CDegrees.html&#34;&gt;math/degrees&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for converting value to radians value&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d0d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CAverage.html&#34;&gt;math/average&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for average $ \frac{1}{i} \sum_{i} x_i $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d8e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CMinIndex.html&#34;&gt;math/minindex&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for index of minimum&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d52/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CBinomial.html&#34;&gt;math/binomial&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calculating binomial coefficient $ \binom{n}{k} $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/df6/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CRadians.html&#34;&gt;math/radians&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for radiant value&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d64/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CExp.html&#34;&gt;math/exp&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for exponential value $ e^{x_i} $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/dc7/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CFloor.html&#34;&gt;math/floor&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for floor value $ \lfloor x_i \rfloor $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/d0a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CNextPrime.html&#34;&gt;math/nextprime&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for create the next prime number&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/dde/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CMin.html&#34;&gt;math/min&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for minimum $ min( x_0, x_1, \ldots, x_i ) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/db9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CIsPrime.html&#34;&gt;math/isprime&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for checking for a prime number&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d00/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CSqrt.html&#34;&gt;math/sqrt&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for sqrt value $ \sqrt{ x_i } $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/dc9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CFactorial.html&#34;&gt;math/factorial&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calculating factorial $ ! x_i $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d74/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CLog.html&#34;&gt;math/log&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for logarithm value $ log( x_i ) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d24/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CCeil.html&#34;&gt;math/ceil&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for ceil value $ \lceil x_i \rceil $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d13/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CRound.html&#34;&gt;math/round&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for rounded value&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d1b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CASin.html&#34;&gt;math/asin&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for arc sinus value $ sin( x_i ) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d8d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CCosh.html&#34;&gt;math/cosh&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for cosinus hyperbolic value $ cosh( x_i ) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d09/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CSignum.html&#34;&gt;math/signum&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for signum value&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d79/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CSin.html&#34;&gt;math/sin&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for sinus value $ sin( x_i ) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/ddb/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CHypot.html&#34;&gt;math/hypot&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calculating $ \sqrt{ x^2 + y^2 } $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d9e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CTan.html&#34;&gt;math/tan&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for tangens value $ tan( x_i ) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d67/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CMax.html&#34;&gt;math/max&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for maximum $ max( x_0, x_1, \ldots, x_i ) $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/d83/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CPrimeFactors.html&#34;&gt;math/primefactors&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for creating prime factors&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d02/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CSum.html&#34;&gt;math/sum&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for sum of elements $ \sum_{i} x_i $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/da0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1CSinh.html&#34;&gt;math/sinh&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for sinus hyperbolic value $ sinh( x_i ) $ &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/blas&#34;&gt;math/blas&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d17/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1CSize.html&#34;&gt;math/blas/size&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the elements within the BLAS structure&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d67/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1CMultiply.html&#34;&gt;math/blas/multiply&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;defines matrix- / vector-products&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d6e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1CElementWise.html&#34;&gt;math/blas/elementwise&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;elementweise vector / matrix operation&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/blas/matrix&#34;&gt;math/blas/matrix&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d39/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CAssign.html&#34;&gt;math/blas/matrix/assign&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;assigns a value or matrix to all elements&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d18/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CTwoNorm.html&#34;&gt;math/blas/matrix/twonorm&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the two-norm of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d3b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CFrobeniusNorm.html&#34;&gt;math/blas/matrix/frobeniusnorm&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the frobenius-norm of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d48/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CSet.html&#34;&gt;math/blas/matrix/set&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;set a single element of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d23/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CColumn.html&#34;&gt;math/blas/matrix/column&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a single column of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d05/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CDeterminant.html&#34;&gt;math/blas/matrix/determinant&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the determinant of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/dce/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1COneNorm.html&#34;&gt;math/blas/matrix/onenorm&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the one-norm of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/da4/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CGet.html&#34;&gt;math/blas/matrix/get&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a single element of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d00/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CNonZero.html&#34;&gt;math/blas/matrix/nonzero&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of non-zero cells&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/de1/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CCreate.html&#34;&gt;math/blas/matrix/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a dense- or sparse-matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d82/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CCopy.html&#34;&gt;math/blas/matrix/copy&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a copy of the matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d9b/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CSingularValue.html&#34;&gt;math/blas/matrix/singularvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the singular value decomposition of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d98/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CRowNumber.html&#34;&gt;math/blas/matrix/rownumber&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the row number of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d8/d89/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CInfinityNorm.html&#34;&gt;math/blas/matrix/infinitynorm&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the infinitiy-norm of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d30/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CPower.html&#34;&gt;math/blas/matrix/power&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the matrix power&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d99/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CEigenValue.html&#34;&gt;math/blas/matrix/eigenvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the eigenvalues of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/d46/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CRank.html&#34;&gt;math/blas/matrix/rank&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;rank of the matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/dc9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CTrace.html&#34;&gt;math/blas/matrix/trace&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates the trace of the matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/df6/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CSubMatrix.html&#34;&gt;math/blas/matrix/submatrix&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a submatrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/df2/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CInvert.html&#34;&gt;math/blas/matrix/invert&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;inverts the matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d58/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CColumnNumber.html&#34;&gt;math/blas/matrix/columnnumber&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the column number of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d0f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CSum.html&#34;&gt;math/blas/matrix/sum&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns sum of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d0e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CTranspose.html&#34;&gt;math/blas/matrix/transpose&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;transpose the matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d29/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CCondition.html&#34;&gt;math/blas/matrix/condition&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the condition of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/dfe/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CParse.html&#34;&gt;math/blas/matrix/parse&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a dense- or sparse-matrix from a string semicolon splits the rows, spaces / comma splits the columns&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d26/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CSolve.html&#34;&gt;math/blas/matrix/solve&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;solver of matrix-equation $ A \cdot X = B $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/df3/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1matrix_1_1CRow.html&#34;&gt;math/blas/matrix/row&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a single row of a matrix&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/blas/vector&#34;&gt;math/blas/vector&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d37/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CSum.html&#34;&gt;math/blas/vector/sum&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns sum of a vector&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/d17/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CCopy.html&#34;&gt;math/blas/vector/copy&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a copy of the matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d16/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CToList.html&#34;&gt;math/blas/vector/tolist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;converts a vector to a list&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/deb/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CCreate.html&#34;&gt;math/blas/vector/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a dense- or sparse-vector&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d88/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CAssign.html&#34;&gt;math/blas/vector/assign&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;assigns a value or matrix to all elements&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d7f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CSet.html&#34;&gt;math/blas/vector/set&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;set a single element of a matrix&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d55/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CNonZero.html&#34;&gt;math/blas/vector/nonzero&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns the number of non-zero cells&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/da/da0/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CDotProduct.html&#34;&gt;math/blas/vector/dotproduct&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns sum of a vector&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/dec/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CFromList.html&#34;&gt;math/blas/vector/fromlist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a dense- or sparse-vector from a list&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/ddf/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CParse.html&#34;&gt;math/blas/vector/parse&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a dense- or sparse-vector from as string seperator is comma, semicolon or space&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d96/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1blas_1_1vector_1_1CGet.html&#34;&gt;math/blas/vector/get&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;returns a single element of a vector&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/interpolate&#34;&gt;math/interpolate&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dd/df4/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1interpolate_1_1CInterpolate.html&#34;&gt;math/interpolate/interpolate&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create interpolated values&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/d80/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1interpolate_1_1CCreate.html&#34;&gt;math/interpolate/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create a spline interpolation&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/linearprogram&#34;&gt;math/linearprogram&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d46/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1linearprogram_1_1CSolve.html&#34;&gt;math/linearprogram/solve&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;solves the linear program&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d1/db4/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1linearprogram_1_1CCreate.html&#34;&gt;math/linearprogram/create&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create a linear program with an objective functions $ \left( \sum_{i=1} c_i \cdot x_i \right) + d $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/da5/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1linearprogram_1_1CEquationConstraint.html&#34;&gt;math/linearprogram/equationconstraint&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;add a linear value constraint to the LP with the definition $ \left( \sum_{i=1} c_i \cdot x_i \right) + c_{const} = \left( \sum_{i=1} r_i \cdot x_i \right) + r_{const} $ , $ \left( \sum_{i=1} c_i \cdot x_i \right) + c_{const} \geq \left( \sum_{i=1} r_i \cdot x_i \right) + r_{const} $  $ \left( \sum_{i=1} c_i \cdot x_i \right) + c_{const} \leq \left( \sum_{i=1} r_i \cdot x_i \right) + r_{const} $ &lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d7/d6d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1linearprogram_1_1CValueConstraint.html&#34;&gt;math/linearprogram/valueconstraint&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;add a linear value constraint to the LP with the definition $ \sum_{i=1} c_i \cdot x_i = v $ , $ \sum_{i=1} c_i \cdot x_i \geq v $  $ \sum_{i=1} c_i \cdot x_i \leq v $ &lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/shape&#34;&gt;math/shape&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/dc/d5a/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1shape_1_1CInCircle.html&#34;&gt;math/shape/incircle&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action check if a point is within a circle&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/d99/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1shape_1_1CInTriangle.html&#34;&gt;math/shape/intriangle&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action check if a point is within a triangle&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Barycentric_coordinate_system&#34; /&gt;https://en.wikipedia.org/wiki/Barycentric_coordinate_system&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;http://jsfiddle.net/dog_funtom/H7D7g/&#34; /&gt;http://jsfiddle.net/dog_funtom/H7D7g/&lt;/a&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/df/dee/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1shape_1_1CInRectangle.html&#34;&gt;math/shape/inrectangle&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action check if a point within a rectangle&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;math/statistic&#34;&gt;math/statistic&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d93/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CExponentialProportionateSelection.html&#34;&gt;math/statistic/exponentialproportionateselection&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to define a fitness-proportinate-selection mechanism&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Boltzmann_distribution&#34; /&gt;https://en.wikipedia.org/wiki/Boltzmann_distribution&lt;/a&gt;&lt;/dd&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Log-linear_model&#34; /&gt;https://en.wikipedia.org/wiki/Log-linear_model&lt;/a&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d0d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CGetStatisticValue.html&#34;&gt;math/statistic/getstatisticvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to return a statistic value&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d0/d8f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CCreateDistribution.html&#34;&gt;math/statistic/createdistribution&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;creates a distribution object&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d5/d37/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CRandomSimple.html&#34;&gt;math/statistic/randomsimple&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;create a (set) of simple random values&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/df9/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CLinearProportionateSelection.html&#34;&gt;math/statistic/linearproportionateselection&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to define a exponential fitness-proportinate-selection mechanism&lt;dl class=&#34;tooltip&#34;&gt;&lt;dt&gt;See&lt;/dt&gt;&lt;dd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fitness_proportionate_selection&#34; /&gt;https://en.wikipedia.org/wiki/Fitness_proportionate_selection&lt;/a&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d2/d98/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CRandomSample.html&#34;&gt;math/statistic/randomsample&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;create a (set) of random values&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d2f/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CCreateStatistic.html&#34;&gt;math/statistic/createstatistic&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to create a summary statistic&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d8d/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CAddStatisticValue.html&#34;&gt;math/statistic/addstatisticvalue&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to push a value to the statistic object&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/de/d8e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1math_1_1statistic_1_1CClearStatistic.html&#34;&gt;math/statistic/clearstatistic&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to clears the statistic&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id=&#34;rest&#34;&gt;rest&lt;/h2&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/db/d28/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1rest_1_1CJsonList.html&#34;&gt;rest/jsonlist&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calling a restful service with a json object list&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d3/d0e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1rest_1_1CXMLObject.html&#34;&gt;rest/xmlobject&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action to call a restful service with xml data&lt;/dd&gt;&lt;dt&gt;&lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d6/d4e/classorg_1_1lightjason_1_1agentspeak_1_1action_1_1buildin_1_1rest_1_1CJsonObject.html&#34;&gt;rest/jsonobject&lt;/a&gt;&lt;/dt&gt;
    &lt;dd class=&#34;tooltiptoggle&#34;&gt;action for calling a restful service with a json object&lt;/dd&gt;
</description>
    </item>
    
    <item>
      <title>Basic Knowledge: Finite-State-Machine</title>
      <link>https://lightjason.github.io/knowledgebase/finitestatemachine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/finitestatemachine/</guid>
      <description>

&lt;h2 id=&#34;state-machine&#34;&gt;State Machine&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Finite-state_machine&#34;&gt;Finite-State-Machine&lt;/a&gt; is a system with explicit defined states and transitions between the states with the following syntax:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;state&lt;/strong&gt; is presented by a circle and defines a &lt;em&gt;stable execution point&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;final state&lt;/strong&gt; is defined by a circle with a &lt;em&gt;double outline&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the state-machine defines a single &lt;strong&gt;initial state&lt;/strong&gt; with a triangle&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;transition&lt;/strong&gt; is presented by an arrow which starts in a state and ends in a state. A transition symbols a an active execution call like a function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mostly within a state the state-name is documented, also the arrow of a transition can be used for documentation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This example show a similar state-machine with three states, that runs from the &lt;em&gt;initial state&lt;/em&gt; to a &lt;em&gt;final state&lt;/em&gt; (left to right). This example shows the &lt;em&gt;static structure&lt;/em&gt; of the state machine, so there is no runtime information with in the illustration
&lt;img src=&#34;https://lightjason.github.io/images/fsm1.svg#centering&#34; alt=&#34;finite-state-machine&#34; style=&#34;width: 30%; &#34;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;usage-and-example&#34;&gt;Usage and Example&lt;/h3&gt;

&lt;p&gt;State-Machine are an useful tool to describe &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expressions&lt;/a&gt; and we would like to motivate this concept for explaining the functional principle:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The main goal is to create a system, which can check strings that matchs the following criteria:
The strings starts with an arbitrary  sequence of the letter &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; (the sequence can be empty).
After the initial sequence follows a positiv number which depends on any digit.
The end of the digit sequence is a sequence of the letter &lt;code&gt;x&lt;/code&gt; with two letters at minimum. All letters within this string can be lower- or upper-case. Some valid example sequences: &lt;code&gt;ab1x&lt;/code&gt;, &lt;code&gt;aaaaabbb169XXX&lt;/code&gt;, &lt;code&gt;AaAabbBB972xXxXXXX&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most programming languages defines such regular expression in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression#Perl&#34;&gt;perl notation&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression#POSIX_basic_and_extended&#34;&gt;posix notation&lt;/a&gt;. We use for the example the posix notation which is defined as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(a|A|b|B)*  [0-9]+  (x|X){2,}&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first block &lt;code&gt;(a|A|b|B)*&lt;/code&gt; defines the different letters and the &lt;code&gt;|&lt;/code&gt; defines the &lt;em&gt;or&lt;/em&gt;-Operator. At the end the &lt;code&gt;*&lt;/code&gt;-operator defines $\geq 0$ elements.&lt;/li&gt;
&lt;li&gt;The second block &lt;code&gt;[0-9]+&lt;/code&gt; defines &lt;em&gt;all elements between 0 and 9&lt;/em&gt; and the &lt;code&gt;+&lt;/code&gt;-operator sets the number of elements $\geq 1$&lt;/li&gt;
&lt;li&gt;The third block &lt;code&gt;(x|X){2,}&lt;/code&gt; defines similar to the first both letter cases and the &lt;code&gt;{2,}&lt;/code&gt; defines the number of elements with $\geq 2$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on this definition it is possible to define a state machine, which can check if  the string matchs the given structure. On the runtime the string is read character by character and based on the state machine a transition will be found, which matchs the character.&lt;/p&gt;

&lt;h2 id=&#34;petri-net&#34;&gt;Petri Net&lt;/h2&gt;

&lt;p&gt;Based on the static information of the state machine it can be extend to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Petri_net&#34;&gt;petri net&lt;/a&gt;, which allows to a runtime behaviour. The concept of such a petri net is used to describe an agent during runtime.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic Knowledge: From Finite-State-Machine and Logical Programming to an Agent</title>
      <link>https://lightjason.github.io/knowledgebase/agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/agent/</guid>
      <description>

&lt;p&gt;The main definition of our &lt;a href=&#34;https://en.wikipedia.org/wiki/Belief%E2%80%93desire%E2%80%93intention_software_model&#34;&gt;BDI (Belief-Desire-Intention) framework&lt;/a&gt; follows &lt;a href=&#34;http://aima.cs.berkeley.edu/&#34;&gt;Russell &amp;amp; Norvig - Artificial Intelligence: A Modern Approach&lt;/a&gt; with the structure of &lt;em&gt;goal-based agents&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An agent is anything that can be viewed as perceiving its environment through sensors and acting upon that environment through effectors &lt;em&gt;(Chapter 2.1, page 31)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are defining furthermore along the book of &lt;a href=&#34;http://www.cs.ox.ac.uk/people/michael.wooldridge/pubs/imas/IMAS2e.html&#34;&gt;Michael Wooldrige - An Introduction to MultiAgent Systems&lt;/a&gt; &lt;em&gt;(chapter 2.1, page 26)&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Reactivity:&lt;/em&gt; Intelligent agents are able to perceive their environment, and respond in a timely fashion to changes that occur in it in order to satisfy their design objectives&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Proactiveness:&lt;/em&gt; Intelligent agents are able to exhibit goal-directed behaviour by talking the initiative in order to satisfy their design objectives&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Social ability:&lt;/em&gt; Intelligent agents are capable of interacting with other agents (and possible humans) in order to satisfy their design objectives&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The technical execution structure of the agent uses the concepts of &lt;a href=&#34;https://en.wikipedia.org/wiki/Procedural_reasoning_system&#34;&gt;PRS (Procedural Reasoning System)&lt;/a&gt; and architecture of &lt;a href=&#34;https://en.wikipedia.org/wiki/Distributed_multi-agent_reasoning_system&#34;&gt;dMARS (Distributed Multi-Agent Reasoning System)&lt;/a&gt;, so we are definiting the agent as a &lt;a href=&#34;finitestatemachine&#34;&gt;Finite-State-Machine&lt;/a&gt; in a &lt;a href=&#34;logicalprogramming&#34;&gt;Logical Programming language&lt;/a&gt; with the following definition:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;initial state&lt;/strong&gt; is optionally defined with the &lt;em&gt;initial goal&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;state&lt;/strong&gt; is a set of beliefs if a cycle is not running&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;transition&lt;/strong&gt; is the execution of a plan (with instantiation of a goal) and is limited by the &lt;em&gt;plan condition&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But in general, in parallel execution of plans there can be many active transition in one cycle.
We also focus on the definition of &lt;em&gt;M. Wooldrige&lt;/em&gt;, stating that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a multi-agent system is inherently multithreaded, in that each agent is assumed to have at least on thread of control &lt;em&gt;(chapter 2.2, page 30)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;basic-behaviour&#34;&gt;Basic Behaviour&lt;/h2&gt;

&lt;p&gt;This basic example shows the main functionality of the structure. We define the structure of three plans without a condition and an &lt;em&gt;initial goal&lt;/em&gt;. The &lt;em&gt;initial goal (&lt;code&gt;main&lt;/code&gt;)&lt;/em&gt; calls two other plans &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; within the next cycle. The &lt;code&gt;first&lt;/code&gt; plan will call itself within the following cycles (loop structure) and the &lt;code&gt;second&lt;/code&gt; plan calls the &lt;em&gt;initial goal&lt;/em&gt; plan.  The &lt;code&gt;first&lt;/code&gt; plan will be called once in each cycle, because the trigger &lt;code&gt;!first&lt;/code&gt; and the plan &lt;code&gt;+!first&lt;/code&gt; match. Note: The plans &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;second&lt;/code&gt; run in parallel.&lt;/p&gt;

&lt;!-- htmlmin:ignore --&gt; 

&lt;p&gt;&lt;pre data-language=&#34;AgentSpeak(L++)&#34;&gt;&lt;code class=&#34;language-agentspeak&#34;&gt;!main.
+!main &amp;lt;- !first; !second.
+!first &amp;lt;- !first.
+!second &amp;lt;- !main.
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- htmlmin:ignore --&gt;&lt;/p&gt;

&lt;p&gt;The state-machine of this agent which executes empty plans is shown in the following picture.&lt;/p&gt;

&lt;p&gt;&lt;svg id=&#34;agentfsm&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;71 51 490 248&#34;&gt;&lt;defs&gt;&lt;style&gt;@keyframes colorchange { 0%{ fill: white; } 50%{ fill: blue; } 100%{ fill: white; } } tspan { font-family: sans-serif; fill: black; }&lt;/style&gt;&lt;marker orient=&#34;auto&#34; overflow=&#34;visible&#34; id=&#34;a&#34; viewBox=&#34;-1 -4 10 8&#34; markerWidth=&#34;10&#34; markerHeight=&#34;8&#34; color=&#34;#000&#34;&gt;&lt;path d=&#34;M8 0L0-3v6z&#34; fill=&#34;currentColor&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/marker&gt;&lt;marker orient=&#34;auto&#34; overflow=&#34;visible&#34; id=&#34;b&#34; viewBox=&#34;-9 -4 10 8&#34; markerWidth=&#34;10&#34; markerHeight=&#34;8&#34; color=&#34;#000&#34;&gt;&lt;path d=&#34;M-8 0l8 3v-6z&#34; fill=&#34;currentColor&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;g fill=&#34;none&#34;&gt;&lt;circle class=&#34;state&#34; cx=&#34;130.5&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34;/&gt;&lt;circle id=&#34;init&#34; cx=&#34;130.5&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path d=&#34;M82.5 109.5l25.5 12.75L82.5 135z&#34; fill=&#34;#fff&#34;/&gt;&lt;path d=&#34;M82.5 109.5l25.5 12.75L82.5 135z&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;circle class=&#34;state&#34; cx=&#34;292.5&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34;/&gt;&lt;circle id=&#34;main&#34; cx=&#34;292.5&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;circle class=&#34;state&#34; cx=&#34;434.376&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34;/&gt;&lt;circle id=&#34;first&#34; cx=&#34;434.376&#34; cy=&#34;121.5&#34; r=&#34;22.5&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;circle class=&#34;state&#34; cx=&#34;355.5&#34; cy=&#34;265.5&#34; r=&#34;22.5&#34;/&gt;&lt;circle id=&#34;second&#34; cx=&#34;355.5&#34; cy=&#34;265.5&#34; r=&#34;22.5&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path marker-end=&#34;url(#a)&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M153 121.5h107.1m54.9 0h86.976m-89.208 9.784c15.854 9.18 36.886 25.068 47.232 48.716 8.308 18.99 7.907 38.826 5.104 54.606&#34;/&gt;&lt;path d=&#34;M282.896 152.394c-2.803 15.78-3.204 35.617 5.104 54.606 10.346 23.648 31.378 39.537 47.232 48.716&#34; marker-start=&#34;url(#b)&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path d=&#34;M448.939 104.346C464.217 87.377 488.17 63.813 504 63c24.824-1.275 37.725 37.427 18 54-10.586 8.895-35.047 9.538-55.441 8.225&#34; marker-end=&#34;url(#a)&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path fill=&#34;#fff&#34; d=&#34;M177.515 106.5h49v30h-49z&#34;/&gt;&lt;text transform=&#34;translate(182.515 112.276)&#34;&gt;&lt;tspan x=&#34;.084&#34; y=&#34;15&#34; textLength=&#34;38.832&#34;&gt;!main&lt;/tspan&gt;&lt;/text&gt;&lt;path fill=&#34;#fff&#34; d=&#34;M338.2 106.5h41v30h-41z&#34;/&gt;&lt;text transform=&#34;translate(343.2 112.276)&#34;&gt;&lt;tspan x=&#34;.1&#34; y=&#34;15&#34; textLength=&#34;30.8&#34;&gt;!first&lt;/tspan&gt;&lt;/text&gt;&lt;path fill=&#34;#fff&#34; d=&#34;M510.291 72.278h41v30h-41z&#34;/&gt;&lt;text transform=&#34;translate(515.291 78.054)&#34;&gt;&lt;tspan x=&#34;.1&#34; y=&#34;15&#34; textLength=&#34;30.8&#34;&gt;!first&lt;/tspan&gt;&lt;/text&gt;&lt;path fill=&#34;#fff&#34; d=&#34;M317.016 148.745h67v30h-67z&#34;/&gt;&lt;text transform=&#34;translate(322.016 154.521)&#34;&gt;&lt;tspan x=&#34;.052&#34; y=&#34;15&#34; textLength=&#34;56.896&#34;&gt;!second&lt;/tspan&gt;&lt;/text&gt;&lt;path fill=&#34;#fff&#34; d=&#34;M266.617 198.336h49v30h-49z&#34;/&gt;&lt;text transform=&#34;translate(271.617 204.112)&#34;&gt;&lt;tspan x=&#34;.084&#34; y=&#34;15&#34; textLength=&#34;38.832&#34;&gt;!main&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/p&gt;

&lt;p&gt;The picture shows the &lt;em&gt;static model&lt;/em&gt; of the agent and the states represent a &lt;em&gt;set of beliefs&lt;/em&gt; which are created during runtime and the the transitions are the instantiation of the goal and the execution of the plans. The initial state is defined by the initial goal.
&lt;br/&gt;
Based on this static model the &lt;em&gt;runtime model&lt;/em&gt; shows the execution structure of the state-machine. The animation shows the continuous execution_ of the agent on each cycle. In this case the agent runs infinitely, but it switches between the &lt;code&gt;main&lt;/code&gt;-state and the &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt;-state, but these two states run in parallel (&lt;a href=&#34;#agentfsm&#34; id=&#34;animate-agentfsm&#34;&gt;animate finite-state-machine&lt;/a&gt;).
&lt;script src=&#34;https://lightjason.github.io/js/agentfsm.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;action-behaviour&#34;&gt;Action Behaviour&lt;/h2&gt;

&lt;p&gt;Actions are one of the helpful structures within agent-programming. A definition of an action is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The action is a function with $f : \mathbb{X}^n \rightarrow \mathbb{B}$ and $\mathbb{X}$ is any input data type and $\mathbb{B}$ is a binary set with {true, false}, which is executed independend and directly within the current agent / plan context. An action can change the environment immediately or the internal structure of the agent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On a technical point of view the action is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Method_(computer_programming)&#34;&gt;method&lt;/a&gt;, which is called inside the current plan. The method is defined by the &lt;a href=&#34;http://lightjason.github.io/AgentSpeak/sources/d0/dfe/interfaceorg_1_1lightjason_1_1agentspeak_1_1action_1_1IAction__coll__graph.svg&#34; data-lightbox=&#34;iaction-interface&#34; data-title=&#34;IAction interface&#34;&gt;IAction interface&lt;/a&gt;. All actions&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:iaction&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:iaction&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; implement this interface which uses the &lt;em&gt;IExecution&lt;/em&gt; interface for all executable structures.
&lt;br/&gt;
Based on the first illustrated finite-state-machine we will show the action structure. In short: Actions executed on the &lt;em&gt;transition&lt;/em&gt;. On the first state-machine the transition contains only the &lt;em&gt;achievement goals&lt;/em&gt;. An achievement goal is also an action which executes a plan.&lt;/p&gt;

&lt;!-- htmlmin:ignore --&gt;

&lt;p&gt;&lt;pre data-language=&#34;AgentSpeak(L++)&#34;&gt;&lt;code class=&#34;language-agentspeak line-numbers&#34;&gt;!main.&lt;/p&gt;

&lt;p&gt;+!main &amp;lt;-
    generic/print(&amp;ldquo;execute main-goal&amp;rdquo;);
    !first;
    generic/print(&amp;ldquo;achievement-goal in main: first&amp;rdquo;);
    !second;
    generic/print(&amp;ldquo;achievement-goal in main: second&amp;rdquo;)
.&lt;/p&gt;

&lt;p&gt;+!first &amp;lt;-
    generic/print(&amp;ldquo;execute first-goal&amp;rdquo;);
    !first;
    generic/print(&amp;ldquo;achievement-goal in first: first&amp;rdquo;)
.&lt;/p&gt;

&lt;p&gt;+!second &amp;lt;-
    generic/print(&amp;ldquo;execute second-goal&amp;rdquo;);
    !main;
    generic/print(&amp;ldquo;achievement-goal in second: main&amp;rdquo;)
.&lt;/p&gt;

&lt;p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- htmlmin:ignore --&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:iaction&#34;&gt;see the &lt;a href=&#34;http://lightjason.github.io/AgentSpeak/sources/dc/d53/interfaceorg_1_1lightjason_1_1agentspeak_1_1action_1_1IAction.html&#34;&gt;IAction interface&lt;/a&gt; for a detailed description
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:iaction&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Basic Knowledge: Logical Programming</title>
      <link>https://lightjason.github.io/knowledgebase/logicalprogramming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/logicalprogramming/</guid>
      <description>

&lt;p&gt;This tutorial gives a short introduction in &lt;a href=&#34;https://en.wikipedia.org/wiki/Logic_programming&#34;&gt;logical programming concepts&lt;/a&gt;, which are needed to write the source code of an agent.
For a general understanding of logical programming it can be helpful to learn first Prolog, in detail we recommend &lt;a href=&#34;http://www.swi-prolog.org/&#34;&gt;SWI-Prolog&lt;/a&gt;, because there are a lot of applications and good tutorials to understand the main mechanism of logical programming.&lt;/p&gt;

&lt;div id=&#34;toccontainer&#34;&gt;Contents [&lt;a href=&#34;#&#34; id=&#34;tochideshow&#34;&gt;Hide&lt;/a&gt;]&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&#34;design-time&#34;&gt;Design Time&lt;/h2&gt;

&lt;p&gt;On logical programs we are talking about a &lt;em&gt;symbolic definition&lt;/em&gt;. We are writing source code in &lt;em&gt;symbols&lt;/em&gt;, &lt;em&gt;facts&lt;/em&gt; and &lt;em&gt;rules&lt;/em&gt;.
The difference between &lt;a href=&#34;https://en.wikipedia.org/wiki/Imperative_programming&#34;&gt;imperative programming&lt;/a&gt; and a logical program is, that latter does not define &lt;em&gt;how the problem should be solved&lt;/em&gt;. It only defines the facts and rules which are needed to calculate the solution. In a more general way it defines the &lt;em&gt;constraints&lt;/em&gt; which are needed to solve the problem. On this definition the runtime creates an internal structure to solve the problem.&lt;/p&gt;

&lt;p&gt;In LightJason&amp;rsquo;s agent developing process, you have to write an &lt;em&gt;agent script&lt;/em&gt; in our AgentSpeak(L++) programming language, which describes the behaviour of the agent. The script describes &lt;em&gt;what and when the agent should do&lt;/em&gt;. This process is named &lt;em&gt;design time&lt;/em&gt;, because you design the behaviour without knowledge about the real execution process. During &lt;em&gt;design time&lt;/em&gt; there are some concepts to understand related to the structure of our logical programming language, which are shown in the following.&lt;/p&gt;

&lt;h3 id=&#34;terms&#34;&gt;Terms&lt;/h3&gt;

&lt;p&gt;In short: &lt;em&gt;Everything is a term.&lt;/em&gt;
All elements within the source code are terms, so the super (generic) data structure is a term. In our framework we distinguish two different types of terms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;raw terms&lt;/em&gt; are terms with a native Java datatype. In such a term any Java data structure can be stored, but it cannot be used by the normal behaviour mechanisms of the logical programming language.
Unifying and assignments are nonetheless possible on these raw data structures&lt;/li&gt;
&lt;li&gt;&lt;em&gt;other terms&lt;/em&gt; like literals are structured objects which are here described&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our language implementation we created an inheritance model to build the software architecture for these structured elements.
The root element is the &lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.html&#34;&gt;ITerm interface&lt;/a&gt; and the &lt;a href=&#34;https://lightjason.github.io/AgentSpeak/sources/d4/dc1/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm__inherit__graph_org.svg&#34; data-lightbox=&#34;iterm-inheritance-diagram&#34; data-title=&#34;ITerm inheritance diagram&#34;&gt;ITerm inheritance diagram&lt;/a&gt; shows the structure of the relations.&lt;/p&gt;

&lt;h3 id=&#34;a-name-atomliterals-atom-literals-a&#34;&gt;&lt;a name=&#34;atomliterals&#34;&gt;Atom &amp;amp; Literals&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The simplest structure elements of a logical programming language are &lt;em&gt;atoms&lt;/em&gt; and part of the structure called  &lt;em&gt;literals&lt;/em&gt;.
In the Prolog definition and so in AgentSpeak(L) all literals / atoms are beginning with a lower-case letter. In contrast, by our definition the atom can also contain slashes &lt;code&gt;/&lt;/code&gt; and minus &lt;code&gt;-&lt;/code&gt; characters. For clarification see the following example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We would like to define that the sun is shining
&lt;pre&gt;&lt;code class=&#34;language-prolog &#34;&gt;sun( shining() )&lt;/pre&gt;&lt;/code&gt;
The word &lt;code&gt;sun&lt;/code&gt; and the word &lt;code&gt;shining&lt;/code&gt; are &lt;em&gt;atoms&lt;/em&gt;, the whole structure &lt;code&gt;sun(shining())&lt;/code&gt; is named &lt;em&gt;literal&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;time&#34;&gt;&lt;/a&gt;Another example is a time definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We would like to say it is currently 2 a clock post meridian (pm)
&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;time( current( hour(2), minute(0), pm() ) )&lt;/pre&gt;&lt;/code&gt;
You can see, that a literal can store a list of other literals or values inside the brackets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Based on the first example a negation is also possible:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We would to say it is currently not raining
&lt;pre data-language=&#34;AgentSpeak(L++)&#34;&gt;&lt;code class=&#34;language-agentspeak&#34;&gt;~raining()&lt;/pre&gt;&lt;/code&gt;
The tilde &lt;code&gt;~&lt;/code&gt; in front of a atom defines the &lt;a href=&#34;https://en.wikipedia.org/wiki/Stable_model_semantics#Strong_negation&#34;&gt;strong negation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;variables&#34;&gt;Variables&lt;/h3&gt;

&lt;p&gt;Variables can be used to define literals with a &lt;em&gt;placeholder&lt;/em&gt; and (in contrast to atoms or literals) begins with an upper-case letter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Based on the &lt;a href=&#34;#time&#34;&gt;time example&lt;/a&gt; we added some variables to extract the hour and minute part of the literal
&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;time( current( hour( Hour ), minute( Minute ), pm() ) )&lt;/code&gt;&lt;/pre&gt;
The upper-case variables &lt;code&gt;Hour&lt;/code&gt; and &lt;code&gt;Minute&lt;/code&gt; are parts of the literal and the system can set the values into. This structure is named &lt;a href=&#34;#unification&#34;&gt;unification&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Within a logical programming language exists a specialised variable which is &lt;em&gt;only&lt;/em&gt; the underscore &lt;code&gt;_&lt;/code&gt;. This variable can be sloppy named as &lt;em&gt;trash can&lt;/em&gt;. You can use this special variable for defining a variable which value should be ignored.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In contradistinction to the time example above, we would like to ignore the &lt;code&gt;pm()&lt;/code&gt; part, so we say, that we would like to get the current time and ignoring the 12-hour clock part
&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;time( current( hour( Hour ), minute( Minute ), _ ) )&lt;/code&gt;&lt;/pre&gt;
With this definition we can get a very flexible structure for extracting some information from the literals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;facts-beliefs&#34;&gt;Facts &amp;amp; Beliefs&lt;/h3&gt;

&lt;p&gt;Based on the definition of &lt;a href=&#34;#variables&#34;&gt;variables&lt;/a&gt; and &lt;a href=&#34;#atomliterals&#34;&gt;literals&lt;/a&gt; we are defining a &lt;em&gt;fact&lt;/em&gt; as a &lt;em&gt;literal without variables&lt;/em&gt;. A fact is a literal which define a state or an information (independend whether the information is correct or wrong). In relation to a multi-agent system a &lt;em&gt;belief&lt;/em&gt; is a &lt;em&gt;fact about the knowledge or the environment&lt;/em&gt;. So the fact defines a state or a point of view of an object without any information about the correctness.&lt;/p&gt;

&lt;h3 id=&#34;rules&#34;&gt;Rules&lt;/h3&gt;

&lt;p&gt;Rules, in contrast to &lt;a href=&#34;#a-name-atomliterals-atom-literals-a&#34;&gt;literals&lt;/a&gt;, &lt;a href=&#34;#variables&#34;&gt;variables&lt;/a&gt; and &lt;a href=&#34;#facts-beliefs&#34;&gt;facts&lt;/a&gt;, are an &lt;em&gt;executable structure&lt;/em&gt;. Rules can be seen as a &lt;em&gt;static function&lt;/em&gt; in a logical programming language with some additional structure.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the most famous examples for rules in logical programs is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number&#34;&gt;Fibonacci sequence&lt;/a&gt;. Mathematically this sequences is defined as
$$F_n = F_{n-1} + F_{n-2}$$
$$F_0 = F_1 = F_2 = 1$$
For the value $n=5$ the sequence is calculated as
$$F_5 = F_4 + F_3 = (F_3 + 1) + (1+1) = ((1+1)+1) + (1+1) = 5$$
Based on this calculation you can see that each function element $F_n$ which is not defined as $1$ gets resolved in
a recursive way. A Prolog rule, which calculates the Fibonacci number of any input can be written as follows:
&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;fibonacci(0,0).
fibonacci(1,1).
fibonacci(2,1).
fibonacci(N,R) :-
    N &amp;gt; 1,
    N1 is N-1,
    N2 is N-2,
    fibonacci(N1,R1),
    fibonacci(N2,R2),
    R is R1 + R2
.&lt;/code&gt;&lt;/pre&gt;
One of the most important aspect of a Prolog program is, that the exit conditions are written first. The last item
in the rule is the calculation to be made, iff no other condition can be matched. The last rule can be read in the
following way (the comma is pronounced as a logical &lt;em&gt;and&lt;/em&gt;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If (&lt;code&gt;N&lt;/code&gt; is greater than &lt;code&gt;1&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; (&lt;code&gt;N1&lt;/code&gt; can be set to &lt;code&gt;N-1&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; (&lt;code&gt;N2&lt;/code&gt; can be calculate to &lt;code&gt;N-2&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt;
(the rule &lt;code&gt;fibonacci(N1,R1)&lt;/code&gt; can be successfully executed) &lt;em&gt;and&lt;/em&gt; (the rule &lt;code&gt;fibonacci(N2,R2)&lt;/code&gt; can be successfully executed) &lt;em&gt;and&lt;/em&gt;
(&lt;code&gt;R&lt;/code&gt; can be calculated to &lt;code&gt;R1 + R2&lt;/code&gt;) &lt;em&gt;then&lt;/em&gt; the rule will be finished successful&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The order of the rule is very important, because Prolog tries to find a rule, which can be matched successfully,
the first rule, that matches will be used. Variables will be set during runtime and the values will be passed
back as a reference, which is named &lt;a href=&#34;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&#34;&gt;side effect&lt;/a&gt;. In imperative programming languages these side effects are undesired, but
can be very helpful in logical programming languages.&lt;/p&gt;

&lt;p&gt;But an advice in writing such rules: The logical programming runtime will have to check in the worst-case all possibilities to calculate a solution. The system tries to find a successful solution with a &lt;a href=&#34;https://en.wikipedia.org/wiki/Backtracking&#34;&gt;backtracking algorithm&lt;/a&gt;. This can be a &lt;a href=&#34;https://en.wikipedia.org/wiki/NP-completeness&#34;&gt;NP-complete problem&lt;/a&gt; and so a solution cannot be calculated efficiently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;runtime&#34;&gt;Runtime&lt;/h2&gt;

&lt;p&gt;In the section &lt;a href=&#34;#designtime&#34;&gt;design time&lt;/a&gt; we are talked about a symbolic representation of data. We can define such data in the agent script and during the execution of the agent we would like to modify the data. On an abstract point of view we are talking about &lt;a href=&#34;https://en.wikipedia.org/wiki/Deductive_reasoning&#34;&gt;deductive reasoning&lt;/a&gt;, that means in slopping sentence: &lt;em&gt;We are generating new knowledge, based on the current knowledge of the agent&lt;/em&gt;.&lt;/p&gt;

&lt;img src=&#34;https://lightjason.github.io/images/deduction.svg#centering&#34; alt=&#34;deduction&#34; style=&#34;width: 30%; &#34;/&gt;

&lt;p&gt;The description of the figure is that we are modelling the $\Delta$ during &lt;a href=&#34;#designtime&#34;&gt;design time&lt;/a&gt; with any kind of &lt;a href=&#34;#facts-beliefs&#34;&gt;facts&lt;/a&gt;. During runtime the agent can modify the knowledge and generate implicit knowledge about the environment which is based on the previous knowledge $\Delta$. The implicit knowledge is named $belief(\Delta, \rho)$&lt;/p&gt;

&lt;h3 id=&#34;unification&#34;&gt;Unification&lt;/h3&gt;

&lt;p&gt;In general the &lt;a href=&#34;https://en.wikipedia.org/wiki/Unification_(computer_science)&#34;&gt;unification&lt;/a&gt; is the process for &lt;em&gt;setting values from one literal into the variables of another literal&lt;/em&gt;. Based on the &lt;a href=&#34;#time&#34;&gt;time example&lt;/a&gt; the procedure can look as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We have two literals, one literal with values and another literal with variables
&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;time( current( hour( 2    ), minute( 0      ), pm() ) )
time( current( hour( Hour ), minute( Second ), _    ) )
&lt;/pre&gt;&lt;/code&gt;
Based on this structure the systems tries to transfer the values from the first literal into the variables
of the second literal, such that both literals are equal. If it is not possible the unification
process will fail. On a successful execution the variable &lt;code&gt;Hour&lt;/code&gt; stores the value $2$ and the variable
&lt;code&gt;Second&lt;/code&gt; the value $0$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The runtime of the logical programming language tries to find an executable structure, so that all unification components and &lt;a href=&#34;#rules&#34;&gt;rules&lt;/a&gt; can be finished successfully. The unification process can be used to generate new literals based on existing literals. In combination with &lt;a href=&#34;#rules&#34;&gt;rules&lt;/a&gt; the system can solve complex reasoning structures. If the system cannot find any possibility to solve the problem, the logical program will be stopped with a failure. The goal of the runtime is to find a successful solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Difference to Jason</title>
      <link>https://lightjason.github.io/knowledgebase/differencetojason/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/differencetojason/</guid>
      <description>

&lt;p&gt;We describe the difference between LightJason and &lt;a href=&#34;http://jason.sourceforge.net/&#34;&gt;Jason&lt;/a&gt;, because in general the LightJason framework is inspired by Jason, but it is &lt;strong&gt;not&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a copy of Jason&lt;/li&gt;
&lt;li&gt;a extension to Jason&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LightJason does not use &lt;strong&gt;any code fragments&lt;/strong&gt; of Jason, so there is no connection between the two frameworks. LightJason is &lt;strong&gt;only inspired&lt;/strong&gt; by the concept of Jason on a theoretical level. We build a fully new framework from scratch. The imags allows you to highlight elements by a &lt;em&gt;mouse over effect&lt;/em&gt; for better understanding.&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;toccontainer&#34;&gt;Contents [&lt;a href=&#34;#&#34; id=&#34;tochideshow&#34;&gt;Hide&lt;/a&gt;]&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;script src=&#34;https://lightjason.github.io/js/agentcycle.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;jason-agent-cycle&#34;&gt;Jason Agent Cycle&lt;/h2&gt;

&lt;p&gt;The Jason agent cycle defines the &lt;em&gt;execution mechanism&lt;/em&gt; of an agent and is found on &lt;a href=&#34;http://jason.sourceforge.net/jBook/jBook/Home.html&#34;&gt;Jason Book&lt;/a&gt; figure 4.1 (page 68). The cycle execution depends on the ordering of the source code within the ASL file.&lt;/p&gt;

&lt;p&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; id=&#34;jasonagentcycle&#34; viewBox=&#34;87 70 1598 877&#34;&gt;&lt;defs id=&#34;defs6&#34;&gt;&lt;marker markerHeight=&#34;8&#34; viewBox=&#34;-1 -4 10 8&#34; overflow=&#34;visible&#34; markerWidth=&#34;10&#34; orient=&#34;auto&#34; color=&#34;#000&#34; id=&#34;FilledArrow_Marker&#34;&gt;&lt;path id=&#34;path9&#34; fill=&#34;currentColor&#34; d=&#34;M8 0L0-3v6z&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/marker&gt;&lt;marker markerHeight=&#34;8&#34; viewBox=&#34;-9 -4 10 8&#34; overflow=&#34;visible&#34; markerWidth=&#34;10&#34; orient=&#34;auto&#34; color=&#34;#000&#34; id=&#34;a&#34;&gt;&lt;path id=&#34;path12&#34; fill=&#34;currentColor&#34; d=&#34;M-8 0l8 3v-6z&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;g id=&#34;g14&#34; fill=&#34;none&#34;&gt;&lt;g id=&#34;g18&#34;&gt;&lt;path id=&#34;rect22&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M189 81h1386v855H189z&#34;/&gt;&lt;text id=&#34;text24&#34; fill=&#34;#000&#34; transform=&#34;translate(199 96)&#34;&gt;&lt;tspan id=&#34;tspan26&#34; x=&#34;1309.7&#34; y=&#34;20&#34; textLength=&#34;56.3&#34; font-weight=&#34;bold&#34; font-weight=&#34;700&#34; font-size=&#34;20&#34;&gt;Agent&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path28&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M657 243h36v100.46h85.39&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path id=&#34;path30&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-trigger&#34; d=&#34;M234 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34;/&gt;&lt;path id=&#34;path32&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M234 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text34&#34; fill=&#34;#000&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; transform=&#34;translate(230 234.8)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan36&#34; x=&#34;18.187&#34; y=&#34;13&#34; textLength=&#34;20.482&#34;&gt;per&lt;/tspan&gt; &lt;tspan id=&#34;tspan38&#34; x=&#34;38.417&#34; y=&#34;13&#34; textLength=&#34;32.396&#34;&gt;ceive&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect40&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M783 306h72v99h-72z&#34;/&gt;&lt;path id=&#34;rect42&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M783 306h72v99h-72z&#34;/&gt;&lt;text id=&#34;text44&#34; fill=&#34;#000&#34; transform=&#34;translate(788 311)&#34;&gt;&lt;tspan id=&#34;tspan46&#34; x=&#34;0&#34; y=&#34;14&#34; textLength=&#34;45.136&#34; font-weight=&#34;bold&#34; font-size=&#34;14&#34;&gt;Events&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect48&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-beliefbase&#34; d=&#34;M783 105h72v102h-72z&#34;/&gt;&lt;path id=&#34;rect50&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M783 105h72v102h-72z&#34;/&gt;&lt;text id=&#34;text52&#34; fill=&#34;#000&#34; font-weight=&#34;bold&#34; transform=&#34;translate(788 110)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan54&#34; x=&#34;0&#34; y=&#34;14&#34; textLength=&#34;37.814&#34;&gt;Belief&lt;/tspan&gt; &lt;tspan id=&#34;tspan56&#34; x=&#34;0&#34; y=&#34;31.406&#34; textLength=&#34;33.446&#34;&gt;Base&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect58&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-plans&#34; d=&#34;M1413 213h81v174h-81z&#34;/&gt;&lt;path id=&#34;rect60&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M1413 213h81v174h-81z&#34;/&gt;&lt;text id=&#34;text62&#34; fill=&#34;#000&#34; font-weight=&#34;bold&#34; transform=&#34;translate(1418 218)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan64&#34; x=&#34;0&#34; y=&#34;14&#34; textLength=&#34;29.288&#34;&gt;Plan&lt;/tspan&gt; &lt;tspan id=&#34;tspan66&#34; x=&#34;0&#34; y=&#34;31.406&#34; textLength=&#34;46.662&#34;&gt;Library&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path68&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; d=&#34;M1476 507h72c5 0 9 4.03 9 9v66c0 4.97-4 9-9 9h-72c-5 0-9-4.03-9-9v-66c0-4.97 4-9 9-9z&#34;/&gt;&lt;path id=&#34;path70&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1476 507h72c5 0 9 4.03 9 9v66c0 4.97-4 9-9 9h-72c-5 0-9-4.03-9-9v-66c0-4.97 4-9 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text72&#34; fill=&#34;#000&#34; transform=&#34;translate(1472 540.8)&#34;&gt;&lt;tspan id=&#34;tspan74&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;30.403&#34; y=&#34;13&#34; textLength=&#34;19.194&#34; font-size=&#34;14&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path76&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; d=&#34;M1476 654h72c5 0 9 4.03 9 9v66c0 4.97-4 9-9 9h-72c-5 0-9-4.03-9-9v-66c0-4.97 4-9 9-9z&#34;/&gt;&lt;path id=&#34;path78&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1476 654h72c5 0 9 4.03 9 9v66c0 4.97-4 9-9 9h-72c-5 0-9-4.03-9-9v-66c0-4.97 4-9 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text80&#34; fill=&#34;#000&#34; transform=&#34;translate(1472 687.8)&#34;&gt;&lt;tspan id=&#34;tspan82&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;11.356&#34; y=&#34;13&#34; textLength=&#34;57.288&#34; font-size=&#34;14&#34;&gt;sendMsg&lt;/tspan&gt;&lt;/text&gt;&lt;ellipse id=&#34;ellipse84&#34; class=&#34;svg-agentcycle-unify&#34; fill=&#34;#dfd&#34; cx=&#34;1119&#34; cy=&#34;417&#34; ry=&#34;46.5&#34; rx=&#34;48&#34;/&gt;&lt;ellipse id=&#34;ellipse86&#34; cx=&#34;1119&#34; cy=&#34;417&#34; stroke=&#34;#000&#34; ry=&#34;46.5&#34; rx=&#34;48&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text88&#34; fill=&#34;#000&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; transform=&#34;translate(1085.6 400.61)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan90&#34; x=&#34;17.461&#34; y=&#34;13&#34; textLength=&#34;31.878&#34;&gt;Unify&lt;/tspan&gt; &lt;tspan id=&#34;tspan92&#34; x=&#34;15.9&#34; y=&#34;29.392&#34; textLength=&#34;35&#34;&gt;Event&lt;/tspan&gt;&lt;/text&gt;&lt;ellipse id=&#34;ellipse94&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-checkcontext&#34; cx=&#34;957&#34; cy=&#34;417&#34; ry=&#34;46.5&#34; rx=&#34;48&#34;/&gt;&lt;ellipse id=&#34;ellipse96&#34; cx=&#34;957&#34; cy=&#34;417&#34; stroke=&#34;#000&#34; ry=&#34;46.5&#34; rx=&#34;48&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text98&#34; fill=&#34;#000&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; transform=&#34;translate(923.6 400.61)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan100&#34; x=&#34;13.569&#34; y=&#34;13&#34; textLength=&#34;39.662&#34;&gt;Check&lt;/tspan&gt; &lt;tspan id=&#34;tspan102&#34; x=&#34;8.9&#34; y=&#34;29.392&#34; textLength=&#34;49&#34;&gt;Context&lt;/tspan&gt;&lt;/text&gt;&lt;ellipse id=&#34;ellipse104&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-execution&#34; cx=&#34;1338&#34; cy=&#34;549&#34; ry=&#34;46.5&#34; rx=&#34;48&#34;/&gt;&lt;ellipse id=&#34;ellipse106&#34; cx=&#34;1338&#34; cy=&#34;549&#34; stroke=&#34;#000&#34; ry=&#34;46.5&#34; rx=&#34;48&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text108&#34; fill=&#34;#000&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; transform=&#34;translate(1304.6 532.61)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan110&#34; x=&#34;2.677&#34; y=&#34;13&#34; textLength=&#34;61.446&#34;&gt;Execution&lt;/tspan&gt; &lt;tspan id=&#34;tspan112&#34; x=&#34;6.17&#34; y=&#34;29.392&#34; textLength=&#34;54.46&#34;&gt;Intention&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path114&#34; fill=&#34;#fff&#34; d=&#34;M567 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34;/&gt;&lt;path id=&#34;path116&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M567 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text118&#34; fill=&#34;#000&#34; transform=&#34;translate(563 234.8)&#34;&gt;&lt;tspan id=&#34;tspan120&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;30.892&#34; y=&#34;13&#34; textLength=&#34;27.216&#34; font-size=&#34;14&#34;&gt;BRF&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path122&#34; fill=&#34;#fff&#34; d=&#34;M415.5 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34;/&gt;&lt;path id=&#34;path124&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M415.5 198h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text126&#34; fill=&#34;#000&#34; transform=&#34;translate(411.5 234.8)&#34;&gt;&lt;tspan id=&#34;tspan128&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;30.633&#34; y=&#34;13&#34; textLength=&#34;27.734&#34; font-size=&#34;14&#34;&gt;BUF&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path130&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-trigger&#34; d=&#34;M234 522h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34;/&gt;&lt;path id=&#34;path132&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M234 522h81a9 9 0 0 1 9 9v72a9 9 0 0 1-9 9h-81a9 9 0 0 1-9-9v-72a9 9 0 0 1 9-9z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text134&#34; fill=&#34;#000&#34; transform=&#34;translate(230 558.8)&#34;&gt;&lt;tspan id=&#34;tspan136&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;13.133&#34; y=&#34;13&#34; textLength=&#34;62.734&#34; font-size=&#34;14&#34;&gt;checkMail&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path138&#34; fill=&#34;#fff&#34; d=&#34;M456 516l51 51-51 51-51-51z&#34;/&gt;&lt;path id=&#34;path140&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M456 516l51 51-51 51-51-51z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path id=&#34;path142&#34; fill=&#34;#fff&#34; d=&#34;M456 366l51 51-51 51-51-51z&#34;/&gt;&lt;path id=&#34;path144&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M456 366l51 51-51 51-51-51z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text146&#34; fill=&#34;#000&#34; transform=&#34;translate(423.77 407.78)&#34;&gt;&lt;tspan id=&#34;tspan148&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;8.75&#34; y=&#34;13&#34; textLength=&#34;49&#34; font-size=&#34;14&#34;&gt;SocAcc&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path150&#34; fill=&#34;#ffe400&#34; class=&#34;svg-agentcycle-planselect&#34; d=&#34;M957 534l51 51-51 51-51-51z&#34;/&gt;&lt;path id=&#34;path152&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M957 534l51 51-51 51-51-51z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text154&#34; fill=&#34;#000&#34; transform=&#34;translate(958.04 583.15)&#34;&gt;&lt;tspan id=&#34;tspan156&#34; x=&#34;.2&#34; y=&#34;10&#34; textLength=&#34;7.6&#34; font-weight=&#34;500&#34; font-size=&#34;10&#34;&gt;O&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text158&#34; fill=&#34;#000&#34; transform=&#34;translate(948.81 574.22)&#34;&gt;&lt;tspan id=&#34;tspan160&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;.464&#34; y=&#34;13&#34; textLength=&#34;9.072&#34; font-size=&#34;14&#34;&gt;S&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path162&#34; fill=&#34;#fff&#34; d=&#34;M1119 177l51 51-51 51-51-51z&#34;/&gt;&lt;path id=&#34;path164&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1119 177l51 51-51 51-51-51z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;g id=&#34;g166&#34; fill=&#34;#000&#34;&gt;&lt;text id=&#34;text168&#34; transform=&#34;translate(1120 226.15)&#34;&gt;&lt;tspan id=&#34;tspan170&#34; x=&#34;.445&#34; y=&#34;10&#34; textLength=&#34;6.11&#34; font-weight=&#34;500&#34; font-size=&#34;10&#34;&gt;E&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text172&#34; transform=&#34;translate(1110.8 217.22)&#34;&gt;&lt;tspan id=&#34;tspan174&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;.464&#34; y=&#34;13&#34; textLength=&#34;9.072&#34; font-size=&#34;14&#34;&gt;S&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text176&#34; transform=&#34;translate(1115.5 182.33)&#34;&gt;&lt;tspan id=&#34;tspan178&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;5&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;path id=&#34;path180&#34; fill=&#34;#ffe400&#34; class=&#34;svg-agentcycle-planselect&#34; d=&#34;M1176 498l51 51-51 51-51-51z&#34;/&gt;&lt;path id=&#34;path182&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1176 498l51 51-51 51-51-51z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;g id=&#34;g184&#34; fill=&#34;#000&#34;&gt;&lt;text id=&#34;text186&#34; transform=&#34;translate(1177 547.15)&#34;&gt;&lt;tspan id=&#34;tspan188&#34; x=&#34;1.78&#34; y=&#34;10&#34; textLength=&#34;2.59&#34; font-weight=&#34;500&#34; font-size=&#34;10&#34;&gt;I&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text190&#34; transform=&#34;translate(1167.8 538.22)&#34;&gt;&lt;tspan id=&#34;tspan192&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;.464&#34; y=&#34;13&#34; textLength=&#34;9.072&#34; font-size=&#34;14&#34;&gt;S&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text194&#34; transform=&#34;translate(1172.5 503.33)&#34;&gt;&lt;tspan id=&#34;tspan196&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;9&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text198&#34; transform=&#34;translate(1344 455.3)&#34;&gt;&lt;tspan id=&#34;tspan200&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;41.986&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Beliefs&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text202&#34; transform=&#34;translate(1463 621.8)&#34;&gt;&lt;tspan id=&#34;tspan204&#34; x=&#34;.198&#34; y=&#34;13&#34; textLength=&#34;30.604&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;send&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text206&#34; transform=&#34;translate(1412 518.3)&#34;&gt;&lt;tspan id=&#34;tspan208&#34; x=&#34;.036&#34; y=&#34;13&#34; textLength=&#34;39.928&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Action&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text210&#34; font-weight=&#34;500&#34; transform=&#34;translate(1227 502.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan212&#34; x=&#34;.018&#34; y=&#34;13&#34; textLength=&#34;54.964&#34;&gt;Selected&lt;/tspan&gt; &lt;tspan id=&#34;tspan214&#34; x=&#34;.27&#34; y=&#34;29.392&#34; textLength=&#34;54.46&#34;&gt;Intention&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text216&#34; font-weight=&#34;500&#34; transform=&#34;translate(336.5 212.3)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan218&#34; x=&#34;.126&#34; y=&#34;13&#34; textLength=&#34;21.252&#34;&gt;Per&lt;/tspan&gt; &lt;tspan id=&#34;tspan220&#34; x=&#34;21.126&#34; y=&#34;13&#34; textLength=&#34;34.748&#34;&gt;cepts&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text222&#34; transform=&#34;translate(341.5 536.3)&#34;&gt;&lt;tspan id=&#34;tspan224&#34; x=&#34;.108&#34; y=&#34;13&#34; textLength=&#34;63.784&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Messages&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text226&#34; transform=&#34;translate(1095 379.83)&#34;&gt;&lt;tspan id=&#34;tspan228&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;6&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text230&#34; transform=&#34;translate(930 379.83)&#34;&gt;&lt;tspan id=&#34;tspan232&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;7&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text234&#34; transform=&#34;translate(1307.5 511.83)&#34;&gt;&lt;tspan id=&#34;tspan236&#34; x=&#34;.328&#34; y=&#34;12&#34; textLength=&#34;13.344&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;10&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;path id=&#34;rect238&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-intentions&#34; d=&#34;M333 672h225v147H333z&#34;/&gt;&lt;path id=&#34;rect240&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M333 672h225v147H333z&#34;/&gt;&lt;text id=&#34;text242&#34; fill=&#34;#000&#34; transform=&#34;translate(338 677)&#34;&gt;&lt;tspan id=&#34;tspan244&#34; x=&#34;0&#34; y=&#34;14&#34; textLength=&#34;145.446&#34; font-weight=&#34;bold&#34; font-size=&#34;14&#34;&gt;Suspended Intentions&lt;/tspan&gt;&lt;/text&gt;&lt;path class=&#34;svg-agentcycle-triggeritem&#34; id=&#34;rect246&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M360 711h54v99h-54z&#34;/&gt;&lt;path id=&#34;rect248&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M360 711h54v99h-54z&#34;/&gt;&lt;path id=&#34;rect250&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M441 720h63v90h-63z&#34;/&gt;&lt;path id=&#34;rect252&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M441 720h63v90h-63z&#34;/&gt;&lt;g id=&#34;g254&#34; fill=&#34;#000&#34;&gt;&lt;text id=&#34;text256&#34; transform=&#34;translate(419 695.3)&#34;&gt;&lt;tspan id=&#34;tspan258&#34; x=&#34;.101&#34; y=&#34;13&#34; textLength=&#34;119.798&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;(Actions and Msgs)&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text260&#34; transform=&#34;translate(525 743.25)&#34;&gt;&lt;tspan id=&#34;tspan262&#34; x=&#34;0&#34; y=&#34;17&#34; textLength=&#34;18&#34; font-weight=&#34;500&#34; font-size=&#34;18&#34;&gt;…&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text264&#34; transform=&#34;translate(411.5 203.33)&#34;&gt;&lt;tspan id=&#34;tspan266&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;2&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text268&#34; transform=&#34;translate(230 203.33)&#34;&gt;&lt;tspan id=&#34;tspan270&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;1&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text272&#34; transform=&#34;translate(230 527.33)&#34;&gt;&lt;tspan id=&#34;tspan274&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;3&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;path id=&#34;rect276&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-intentions&#34; d=&#34;M684 672h585v147H684z&#34;/&gt;&lt;path id=&#34;rect278&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M684 672h585v147H684z&#34;/&gt;&lt;text id=&#34;text280&#34; fill=&#34;#000&#34; transform=&#34;translate(689 677)&#34;&gt;&lt;tspan id=&#34;tspan282&#34; x=&#34;0&#34; y=&#34;14&#34; textLength=&#34;66.612&#34; font-weight=&#34;bold&#34; font-size=&#34;14&#34;&gt;Intentions&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect284&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M702 702h72v108h-72z&#34;/&gt;&lt;path id=&#34;rect286&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M702 702h72v108h-72z&#34;/&gt;&lt;path id=&#34;rect288&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M792 720h63v90h-63z&#34;/&gt;&lt;path id=&#34;rect290&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M792 720h63v90h-63z&#34;/&gt;&lt;text id=&#34;text292&#34; fill=&#34;#000&#34; transform=&#34;translate(1237 734.25)&#34;&gt;&lt;tspan id=&#34;tspan294&#34; x=&#34;0&#34; y=&#34;17&#34; textLength=&#34;18&#34; font-weight=&#34;500&#34; font-size=&#34;18&#34;&gt;…&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect296&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M873 684h72v126h-72z&#34;/&gt;&lt;path id=&#34;rect298&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M873 684h72v126h-72z&#34;/&gt;&lt;path id=&#34;rect300&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M963 729h63v81h-63z&#34;/&gt;&lt;path id=&#34;rect302&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M963 729h63v81h-63z&#34;/&gt;&lt;path id=&#34;rect304&#34; class=&#34;svg-agentcycle-triggeritem&#34; fill=&#34;#ccc&#34; d=&#34;M1152 711h72v99h-72z&#34;/&gt;&lt;path id=&#34;rect306&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M1152 711h72v99h-72z&#34;/&gt;&lt;path id=&#34;path308&#34; stroke-dasharray=&#34;40 9 8 9&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1161 720h54v81h-54z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;g id=&#34;g310&#34; fill=&#34;#000&#34;&gt;&lt;text id=&#34;text312&#34; transform=&#34;translate(1166 752.3)&#34;&gt;&lt;tspan id=&#34;tspan314&#34; x=&#34;7.881&#34; y=&#34;13&#34; textLength=&#34;28.238&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;New&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text316&#34; transform=&#34;translate(456.04 565.15)&#34;&gt;&lt;tspan id=&#34;tspan318&#34; x=&#34;.145&#34; y=&#34;10&#34; textLength=&#34;8.71&#34; font-weight=&#34;500&#34; font-size=&#34;10&#34;&gt;M&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text320&#34; transform=&#34;translate(447.81 556.22)&#34;&gt;&lt;tspan id=&#34;tspan322&#34; font-style=&#34;italic&#34; font-weight=&#34;500&#34; x=&#34;.464&#34; y=&#34;13&#34; textLength=&#34;9.072&#34; font-size=&#34;14&#34;&gt;S&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text324&#34; transform=&#34;translate(452.5 371.33)&#34;&gt;&lt;tspan id=&#34;tspan326&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;4&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text328&#34; transform=&#34;translate(953.5 539.33)&#34;&gt;&lt;tspan id=&#34;tspan330&#34; x=&#34;.164&#34; y=&#34;12&#34; textLength=&#34;6.672&#34; font-weight=&#34;bold&#34; font-size=&#34;12&#34;&gt;8&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text332&#34; font-weight=&#34;500&#34; transform=&#34;translate(968 680.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan334&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;31.64&#34;&gt;Push&lt;/tspan&gt; &lt;tspan id=&#34;tspan336&#34; x=&#34;0&#34; y=&#34;29.392&#34; textLength=&#34;59.612&#34;&gt;New Plan&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text338&#34; font-weight=&#34;500&#34; transform=&#34;translate(1187.5 673.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan340&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;28.238&#34;&gt;New&lt;/tspan&gt; &lt;tspan id=&#34;tspan342&#34; x=&#34;0&#34; y=&#34;29.392&#34; textLength=&#34;54.46&#34;&gt;Intention&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;path id=&#34;rect344&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M1062 720h63v90h-63z&#34;/&gt;&lt;path id=&#34;rect346&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; d=&#34;M1062 720h63v90h-63z&#34;/&gt;&lt;path id=&#34;path348&#34; stroke-dasharray=&#34;16 9 16 9 1 9&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1069.9 728.18h47.2V756h-47.2z&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text350&#34; fill=&#34;#000&#34; transform=&#34;translate(1074.9 733.89)&#34;&gt;&lt;tspan id=&#34;tspan352&#34; x=&#34;4.506&#34; y=&#34;13&#34; textLength=&#34;28.238&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;New&lt;/tspan&gt;&lt;/text&gt;&lt;g id=&#34;g354&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;&gt;&lt;path id=&#34;line356&#34; d=&#34;M505.5 243h42.6&#34;/&gt;&lt;path id=&#34;path358&#34; marker-start=&#34;url(#a)&#34; d=&#34;M456 188.1V126h317.1&#34;/&gt;&lt;path id=&#34;path360&#34; marker-start=&#34;url(#a)&#34; d=&#34;M607.5 188.1v-32.43H621l152.1.27&#34;/&gt;&lt;path id=&#34;path362&#34; d=&#34;M1323 593.18V855H639V391.27h134.1&#34;/&gt;&lt;path id=&#34;path364&#34; d=&#34;M1341 595.41V882H607.5V297.9&#34;/&gt;&lt;/g&gt;&lt;g id=&#34;g366&#34; fill=&#34;#000&#34;&gt;&lt;text id=&#34;text368&#34; transform=&#34;translate(729 129.64)&#34;&gt;&lt;tspan id=&#34;tspan370&#34; x=&#34;.007&#34; y=&#34;13&#34; textLength=&#34;41.986&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Beliefs&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text412&#34; transform=&#34;translate(1002 223.3)&#34;&gt;&lt;tspan id=&#34;tspan414&#34; x=&#34;.734&#34; y=&#34;13&#34; textLength=&#34;42.266&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Events&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text416&#34; transform=&#34;translate(970 320.3)&#34;&gt;&lt;tspan id=&#34;tspan418&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;41.986&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Beliefs&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text420&#34; font-weight=&#34;500&#34; transform=&#34;translate(1139 295.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan422&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;54.964&#34;&gt;Selected&lt;/tspan&gt; &lt;tspan id=&#34;tspan424&#34; x=&#34;0&#34; y=&#34;29.392&#34; textLength=&#34;35.266&#34;&gt;Event&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text426&#34; transform=&#34;translate(1191 412.3)&#34;&gt;&lt;tspan id=&#34;tspan428&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;34.482&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Plans&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text430&#34; font-weight=&#34;500&#34; transform=&#34;translate(1013 371.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan432&#34; x=&#34;.277&#34; y=&#34;13&#34; textLength=&#34;54.446&#34;&gt;Relevant&lt;/tspan&gt; &lt;tspan id=&#34;tspan434&#34; x=&#34;10.259&#34; y=&#34;29.392&#34; textLength=&#34;34.482&#34;&gt;Plans&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text436&#34; font-weight=&#34;500&#34; transform=&#34;translate(968 478.61)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan438&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;65.856&#34;&gt;Applicable&lt;/tspan&gt; &lt;tspan id=&#34;tspan440&#34; x=&#34;0&#34; y=&#34;29.392&#34; textLength=&#34;34.482&#34;&gt;Plans&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text442&#34; transform=&#34;translate(1189 628.3)&#34;&gt;&lt;tspan id=&#34;tspan444&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;61.46&#34; font-weight=&#34;500&#34; font-size=&#34;14&#34;&gt;Intentions&lt;/tspan&gt;&lt;/text&gt;&lt;text id=&#34;text446&#34; font-weight=&#34;500&#34; transform=&#34;translate(1013 588.38)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan448&#34; x=&#34;.756&#34; y=&#34;13&#34; textLength=&#34;55.244&#34;&gt;Intended&lt;/tspan&gt; &lt;tspan id=&#34;tspan450&#34; x=&#34;13.986&#34; y=&#34;29.392&#34; textLength=&#34;42.014&#34;&gt;Means&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;path id=&#34;path452&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; d=&#34;M1359 590.83v157.91h-80.1&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text id=&#34;text454&#34; fill=&#34;#000&#34; font-weight=&#34;500&#34; transform=&#34;translate(1372 707.11)&#34; font-size=&#34;14&#34;&gt;&lt;tspan id=&#34;tspan456&#34; x=&#34;0&#34; y=&#34;13&#34; textLength=&#34;54.46&#34;&gt;Updated&lt;/tspan&gt; &lt;tspan id=&#34;tspan458&#34; x=&#34;0&#34; y=&#34;29.392&#34; textLength=&#34;54.46&#34;&gt;Intention&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line460&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; stroke-linejoin=&#34;round&#34; d=&#34;M99 243h116.1&#34;/&gt;&lt;text id=&#34;text462&#34; fill=&#34;#000&#34; font-weight=&#34;bold&#34; transform=&#34;translate(103.5 216.77)&#34; font-size=&#34;16&#34;&gt;&lt;tspan id=&#34;tspan464&#34; x=&#34;.42&#34; y=&#34;16&#34; textLength=&#34;26.08&#34;&gt;Per&lt;/tspan&gt; &lt;tspan id=&#34;tspan466&#34; x=&#34;26.212&#34; y=&#34;16&#34; textLength=&#34;42.368&#34;&gt;cepts&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line468&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; stroke-linejoin=&#34;round&#34; d=&#34;M98.5 567h116.6&#34;/&gt;&lt;text id=&#34;text470&#34; fill=&#34;#000&#34; transform=&#34;translate(101.5 536.27)&#34;&gt;&lt;tspan id=&#34;tspan472&#34; x=&#34;.192&#34; y=&#34;16&#34; textLength=&#34;77.616&#34; font-weight=&#34;bold&#34; font-size=&#34;16&#34;&gt;Messages&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line474&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; stroke-linejoin=&#34;round&#34; d=&#34;M1557 549h105.1&#34;/&gt;&lt;text id=&#34;text476&#34; fill=&#34;#000&#34; transform=&#34;translate(1609 527.27)&#34;&gt;&lt;tspan id=&#34;tspan478&#34; x=&#34;.12&#34; y=&#34;16&#34; textLength=&#34;57.76&#34; font-weight=&#34;bold&#34; font-size=&#34;16&#34;&gt;Actions&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line480&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; stroke-linejoin=&#34;round&#34; d=&#34;M1557 695.17l107.1-1.99&#34;/&gt;&lt;text id=&#34;text482&#34; fill=&#34;#000&#34; transform=&#34;translate(1589 668.27)&#34;&gt;&lt;tspan id=&#34;tspan484&#34; x=&#34;.192&#34; y=&#34;16&#34; textLength=&#34;77.616&#34; font-weight=&#34;bold&#34; font-size=&#34;16&#34;&gt;Messages&lt;/tspan&gt;&lt;/text&gt;&lt;g id=&#34;g486&#34; stroke-linecap=&#34;round&#34; stroke=&#34;#000&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;&gt;&lt;path id=&#34;line488&#34; d=&#34;M456 516v-38.1&#34;/&gt;&lt;path id=&#34;line490&#34; d=&#34;M1119 279v81.6&#34;/&gt;&lt;path id=&#34;line492&#34; d=&#34;M324 243h72.6&#34;/&gt;&lt;path id=&#34;line494&#34; d=&#34;M456 366v-68.1&#34;/&gt;&lt;path id=&#34;line496&#34; d=&#34;M1071 417h-56.1&#34;/&gt;&lt;path id=&#34;line498&#34; stroke-dasharray=&#34;4 4&#34; d=&#34;M985.98 607.02l158.12 120.14&#34;/&gt;&lt;path id=&#34;line500&#34; stroke-dasharray=&#34;4 4&#34; d=&#34;M979 614l77 101.57&#34;/&gt;&lt;path id=&#34;line502&#34; d=&#34;M1176.6 672l-.3-62.36&#34;/&gt;&lt;path id=&#34;line504&#34; d=&#34;M1227 549h53.1&#34;/&gt;&lt;path id=&#34;path506&#34; d=&#34;M855 126h483v366.6&#34;/&gt;&lt;path id=&#34;line508&#34; d=&#34;M1386 549h71.1&#34;/&gt;&lt;path id=&#34;line510&#34; d=&#34;M1374.2 579.56l86.3 72.89&#34;/&gt;&lt;path id=&#34;line512&#34; d=&#34;M957 463.5v60.6&#34;/&gt;&lt;path id=&#34;path514&#34; d=&#34;M855 156h102v204.6&#34;/&gt;&lt;path id=&#34;line516&#34; d=&#34;M855 318.78l216.7-74.51&#34;/&gt;&lt;path id=&#34;line518&#34; d=&#34;M1413 314.17l-239.5 83.77&#34;/&gt;&lt;path id=&#34;line520&#34; d=&#34;M324 567h71.1&#34;/&gt;&lt;path id=&#34;path522&#34; d=&#34;M456 366v-23h3l312.34.46h1.76&#34;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/p&gt;

&lt;h2 id=&#34;lightjason-agent-cycle&#34;&gt;LightJason Agent Cycle&lt;/h2&gt;

&lt;p&gt;On a general point of view we reduce the Jason agent cycle to the neccessary elements. This allows us to build a very efficient execution structure based on a &lt;em&gt;parallel data-streaming architecture&lt;/em&gt;. On the other hand we generalize the cycle structure, so we can build a more flexible architecture. But &lt;em&gt;keep in mind&lt;/em&gt; the LightJason agent cycle is run in parallel with optional on-demand / lazy-binding data elements.&lt;/p&gt;

&lt;p&gt;&lt;svg id=&#34;lightjasonagentcycle&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; id=&#34;svg2&#34; viewBox=&#34;75 12 1188 610&#34;&gt;&lt;defs id=&#34;defs6&#34;&gt;&lt;font-face id=&#34;font-face8&#34; font-weight=&#34;bold&#34; descent=&#34;-229.98&#34; ascent=&#34;770.02&#34; cap-height=&#34;719.727&#34; x-height=&#34;532.227&#34; underline-thickness=&#34;49.316&#34; underline-position=&#34;-75.684&#34; font-size=&#34;12&#34;&gt;&lt;font-face-src&gt;&lt;font-face-name name=&#34;Helvetica-Bold&#34;/&gt;&lt;/font-face-src&gt;&lt;/font-face&gt;&lt;font-face id=&#34;font-face10&#34; font-weight=&#34;bold&#34; descent=&#34;-216.995&#34; ascent=&#34;975.006&#34; cap-height=&#34;714&#34; x-height=&#34;517&#34; underline-thickness=&#34;50&#34; underline-position=&#34;-100&#34; panose-1=&#34;2 0 8 3 0 0 0 9 0 4&#34; font-size=&#34;20&#34;&gt;&lt;font-face-src&gt;&lt;font-face-name name=&#34;HelveticaNeue-Bold&#34;/&gt;&lt;/font-face-src&gt;&lt;/font-face&gt;&lt;font-face id=&#34;font-face12&#34; font-weight=&#34;500&#34; descent=&#34;-229.98&#34; ascent=&#34;770.02&#34; cap-height=&#34;717.285&#34; x-height=&#34;522.949&#34; underline-thickness=&#34;49.316&#34; underline-position=&#34;-75.684&#34; font-size=&#34;12&#34;&gt;&lt;font-face-src&gt;&lt;font-face-name name=&#34;Helvetica&#34;/&gt;&lt;/font-face-src&gt;&lt;/font-face&gt;&lt;font-face id=&#34;font-face14&#34; font-weight=&#34;500&#34; descent=&#34;-212.997&#34; ascent=&#34;951.996&#34; cap-height=&#34;714&#34; x-height=&#34;517&#34; underline-thickness=&#34;50&#34; underline-position=&#34;-100&#34; panose-1=&#34;2 0 5 3 0 0 0 2 0 4&#34; font-size=&#34;16&#34;&gt;&lt;font-face-src&gt;&lt;font-face-name name=&#34;HelveticaNeue&#34;/&gt;&lt;/font-face-src&gt;&lt;/font-face&gt;&lt;font-face id=&#34;font-face16&#34; font-weight=&#34;bold&#34; descent=&#34;-216.995&#34; ascent=&#34;975.006&#34; cap-height=&#34;714&#34; x-height=&#34;517&#34; underline-thickness=&#34;50&#34; underline-position=&#34;-100&#34; panose-1=&#34;2 0 8 3 0 0 0 9 0 4&#34; font-size=&#34;16&#34;&gt;&lt;font-face-src&gt;&lt;font-face-name name=&#34;HelveticaNeue-Bold&#34;/&gt;&lt;/font-face-src&gt;&lt;/font-face&gt;&lt;marker markerHeight=&#34;8&#34; markerWidth=&#34;10&#34; viewBox=&#34;-1 -4 10 8&#34; id=&#34;FilledArrow_Marker&#34; overflow=&#34;visible&#34; orient=&#34;auto&#34; color=&#34;#000&#34;&gt;&lt;g id=&#34;g19&#34;&gt;&lt;path id=&#34;path21&#34; d=&#34;M8 0L0-3v6z&#34; fill=&#34;currentColor&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/g&gt;&lt;/marker&gt;&lt;marker markerHeight=&#34;6&#34; markerWidth=&#34;5&#34; viewBox=&#34;-1 -3 5 6&#34; id=&#34;Ball_Marker&#34; overflow=&#34;visible&#34; orient=&#34;auto&#34; color=&#34;#000&#34;&gt;&lt;g id=&#34;g24&#34;&gt;&lt;circle id=&#34;circle26&#34; r=&#34;1.4&#34; cx=&#34;1.4&#34; fill=&#34;none&#34; stroke=&#34;currentColor&#34;/&gt;&lt;/g&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;path id=&#34;rect36&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-trigger&#34; d=&#34;M360 135h171v72H360z&#34;/&gt;&lt;path id=&#34;rect38&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M360 135h171v72H360z&#34;/&gt;&lt;text y=&#34;140&#34; x=&#34;365&#34; id=&#34;text40&#34;&gt;&lt;tspan id=&#34;tspan42&#34; textLength=&#34;7.33&#34; y=&#34;151&#34; x=&#34;405.483&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;T&lt;/tspan&gt; &lt;tspan id=&#34;tspan44&#34; textLength=&#34;73.359&#34; y=&#34;151&#34; x=&#34;412.157&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;rigger Cache&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect46&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M198 99h981v432H198z&#34;/&gt;&lt;text y=&#34;109&#34; x=&#34;213&#34; id=&#34;text48&#34;&gt;&lt;tspan id=&#34;tspan50&#34; textLength=&#34;56.3&#34; y=&#34;129&#34; x=&#34;1107.7&#34; font-weight=&#34;700&#34; font-size=&#34;20&#34;&gt;Agent&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect52&#34; fill=&#34;#ffe400&#34; class=&#34;svg-agentcycle-planselect&#34; d=&#34;M846 108h81v45h-81z&#34;/&gt;&lt;path id=&#34;rect54&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M846 108h81v45h-81z&#34;/&gt;&lt;text y=&#34;116.5&#34; x=&#34;851&#34; id=&#34;text56&#34;&gt;&lt;tspan id=&#34;tspan58&#34; textLength=&#34;24.674&#34; y=&#34;127.5&#34; x=&#34;874.163&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Cost&lt;/tspan&gt; &lt;tspan id=&#34;tspan60&#34; textLength=&#34;64.717&#34; y=&#34;141.5&#34; x=&#34;854.142&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Aggregation&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path62&#34; d=&#34;M944.546 441l63 40.5-63 40.5-63-40.5z&#34; fill=&#34;#fff&#34;/&gt;&lt;path id=&#34;path64&#34; d=&#34;M944.546 441l63 40.5-63 40.5-63-40.5z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;473.69&#34; x=&#34;903.556&#34; id=&#34;text66&#34;&gt;&lt;tspan id=&#34;tspan68&#34; textLength=&#34;78.035&#34; y=&#34;484.69&#34; x=&#34;906.788&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Defuzzification&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect72&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-intentions&#34; d=&#34;M720 279h99v162h-99z&#34;/&gt;&lt;path id=&#34;rect74&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M720 279h99v162h-99z&#34;/&gt;&lt;text y=&#34;284&#34; x=&#34;725&#34; id=&#34;text76&#34;&gt;&lt;tspan id=&#34;tspan78&#34; textLength=&#34;46.031&#34; y=&#34;295&#34; x=&#34;748.151&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;Parallel&lt;/tspan&gt; &lt;tspan id=&#34;tspan80&#34; textLength=&#34;57.328&#34; y=&#34;309&#34; x=&#34;740.836&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;Intentions&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect82&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M387 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect84&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M387 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect86&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M414 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect88&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M414 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect90&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M441 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect92&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M441 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect94&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M468 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect96&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M468 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect98&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-events&#34; d=&#34;M495 160.412h9v40.235h-9z&#34;/&gt;&lt;path id=&#34;rect100&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M495 160.412h9v40.235h-9z&#34;/&gt;&lt;text y=&#34;173.776&#34; x=&#34;509&#34; id=&#34;text102&#34;&gt;&lt;tspan id=&#34;tspan104&#34; textLength=&#34;16&#34; y=&#34;188.776&#34; x=&#34;509&#34; font-weight=&#34;500&#34; font-size=&#34;16&#34;&gt;…&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect106&#34; fill=&#34;#fff&#34; d=&#34;M225 135h63v72h-63z&#34;/&gt;&lt;path id=&#34;path108&#34; d=&#34;M225 135h63v72h-63z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-dasharray=&#34;4 4&#34;/&gt;&lt;text y=&#34;157&#34; x=&#34;230&#34; id=&#34;text110&#34;&gt;&lt;tspan id=&#34;tspan112&#34; textLength=&#34;47.373&#34; y=&#34;168&#34; x=&#34;232.813&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Suspend&lt;/tspan&gt; &lt;tspan id=&#34;tspan114&#34; textLength=&#34;26.666&#34; y=&#34;182&#34; x=&#34;243.167&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Filter&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect116&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M748.5 327h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect118&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M748.5 327h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect120&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M748.5 345h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect122&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M748.5 345h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect124&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M748.5 363h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect126&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M748.5 363h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect128&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M748.5 381h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect130&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M748.5 381h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect132&#34; fill=&#34;#ccc&#34; class=&#34;svg-agentcycle-triggeritem&#34; d=&#34;M748.5 399h42v9h-42z&#34;/&gt;&lt;path id=&#34;rect134&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M748.5 399h42v9h-42z&#34;/&gt;&lt;text y=&#34;416.776&#34; x=&#34;762.157&#34; id=&#34;text136&#34;&gt;&lt;tspan id=&#34;tspan138&#34; textLength=&#34;16&#34; y=&#34;431.776&#34; x=&#34;762.157&#34; font-weight=&#34;500&#34; font-size=&#34;16&#34;&gt;…&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;452.776&#34; x=&#34;1085&#34; id=&#34;text140&#34;&gt;&lt;tspan id=&#34;tspan142&#34; textLength=&#34;16&#34; y=&#34;467.776&#34; x=&#34;1085&#34; font-weight=&#34;500&#34; font-size=&#34;16&#34;&gt;…&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;-1248.732&#34; x=&#34;338&#34; id=&#34;text144&#34; transform=&#34;rotate(90)&#34;&gt;&lt;tspan id=&#34;tspan146&#34; textLength=&#34;57.76&#34; y=&#34;-1232.732&#34; x=&#34;358.12&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;Actions&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;-108.795&#34; x=&#34;140&#34; id=&#34;text148&#34; transform=&#34;rotate(90)&#34;&gt;&lt;tspan id=&#34;tspan150&#34; textLength=&#34;9.776&#34; y=&#34;-92.795&#34; x=&#34;148.692&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;T&lt;/tspan&gt; &lt;tspan id=&#34;tspan152&#34; textLength=&#34;45.312&#34; y=&#34;-92.795&#34; x=&#34;156.996&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;rigger&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;26.036&#34; x=&#34;573&#34; id=&#34;text154&#34;&gt;&lt;tspan id=&#34;tspan156&#34; textLength=&#34;87.68&#34; y=&#34;42.036&#34; x=&#34;573.16&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;on-demand&lt;/tspan&gt; &lt;tspan id=&#34;tspan158&#34; textLength=&#34;53.92&#34; y=&#34;61.5&#34; x=&#34;590.04&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;access&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;26.036&#34; x=&#34;850&#34; id=&#34;text160&#34;&gt;&lt;tspan id=&#34;tspan162&#34; textLength=&#34;33.184&#34; y=&#34;42.036&#34; x=&#34;869.408&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;cost&lt;/tspan&gt; &lt;tspan id=&#34;tspan164&#34; textLength=&#34;71.376&#34; y=&#34;61.5&#34; x=&#34;850.312&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;definition&lt;/tspan&gt;&lt;/text&gt;&lt;text y=&#34;568.549&#34; x=&#34;900.546&#34; id=&#34;text168&#34;&gt;&lt;tspan id=&#34;tspan170&#34; textLength=&#34;87.68&#34; y=&#34;584.549&#34; x=&#34;900.706&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;on-demand&lt;/tspan&gt; &lt;tspan id=&#34;tspan172&#34; textLength=&#34;53.04&#34; y=&#34;604.013&#34; x=&#34;918.026&#34; font-weight=&#34;700&#34; font-size=&#34;16&#34;&gt;update&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line174&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M117 135l98.414 25.397&#34;/&gt;&lt;path id=&#34;line176&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M117 153l98.181 12.669&#34;/&gt;&lt;path id=&#34;line178&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M117 171h98.1&#34;/&gt;&lt;path id=&#34;line180&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M117 189l98.181-12.669&#34;/&gt;&lt;path id=&#34;line182&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M117 207l98.414-25.397&#34;/&gt;&lt;path id=&#34;path184&#34; d=&#34;M288 156.394c9.313-2.006 21.13-3.394 36-3.394 8.464 0 17.288.45 26.147 1.207&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path186&#34; d=&#34;M288 163.697c9.313-1.003 21.13-1.697 36-1.697 8.453 0 17.265.224 26.112.602&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path188&#34; d=&#34;M288 171h62.1&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path190&#34; d=&#34;M288 179.035c7.236.593 16.114.965 27 .965 11.007 0 23.003-.38 35.117-.985&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path192&#34; d=&#34;M288 185.606c9.313 2.006 21.13 3.394 36 3.394 8.464 0 17.288-.45 26.147-1.207&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path194&#34; d=&#34;M801 495.063L242.937 495V216.9&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path196&#34; d=&#34;M270 207v234h347v-17.1&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-dasharray=&#34;4 4&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;rect198&#34; fill=&#34;#fff&#34; d=&#34;M449.092 426h73v30h-73z&#34;/&gt;&lt;text y=&#34;431.776&#34; x=&#34;454.092&#34; id=&#34;text200&#34;&gt;&lt;tspan id=&#34;tspan202&#34; textLength=&#34;62.224&#34; y=&#34;446.776&#34; x=&#34;454.48&#34; font-weight=&#34;500&#34; font-size=&#34;16&#34;&gt;wake-up&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path204&#34; d=&#34;M499.406 200.647L499 288v70h64.458&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path206&#34; d=&#34;M472.425 200.647L472 315v54h90.1&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path208&#34; d=&#34;M445.398 200.647L445 279v99h118.004&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path210&#34; d=&#34;M418.451 200.647L418 387h147.844&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path212&#34; d=&#34;M391.546 200.647L392 398h180.687&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;line214&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M581 171h-40.1&#34;/&gt;&lt;path id=&#34;line216&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M742.038 206.655l-91.535 118.846&#34;/&gt;&lt;path id=&#34;path218&#34; d=&#34;M606.47 207c-1.993 11.854-3.47 26.782-3.47 45 0 21.498 2.056 43.702 4.593 62.914&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path220&#34; d=&#34;M628.354 325.449C633.734 301.196 639 270.445 639 243c0-9.985-.697-18.697-1.843-26.272&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path222&#34; d=&#34;M805.979 197.36C839.283 222.279 887.79 260.83 918 295c6.772 7.66 12.189 14.607 16.496 20.895&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path224&#34; d=&#34;M906.566 344.846C880.491 326.924 845.874 300.398 819 270c-15.125-17.109-25.629-32.99-32.923-46.802&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path226&#34; d=&#34;M653 185.698c8.822 1.956 19.185 3.302 31 3.302 11.211 0 22.361-1.212 32.727-3.007&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path228&#34; d=&#34;M727.365 155.169C719.835 153.845 711.36 153 702 153c-13.68 0-27.22 1.805-39.336 4.271&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;line230&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M972 171H824.4&#34;/&gt;&lt;path id=&#34;line232&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M846 144.519l-24.611 8.519&#34;/&gt;&lt;path id=&#34;line234&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-width=&#34;3&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#Ball_Marker)&#34; d=&#34;M617 135V79.9&#34;/&gt;&lt;path id=&#34;line236&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-width=&#34;3&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#Ball_Marker)&#34; d=&#34;M886.368 108l-.166-28.1&#34;/&gt;&lt;path id=&#34;path238&#34; d=&#34;M659.01 352.84c13.016-4.484 27.917-9.134 42.99-12.84 14.38-3.536 26.665-5.66 36.657-6.92&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path240&#34; d=&#34;M662 369.181a3916.612 3916.612 0 0 0 76.6-.893&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path242&#34; d=&#34;M660.237 381.502A306.626 306.626 0 0 0 684 385c19.697 2.131 39.206 2.423 54.604 2.11&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path244&#34; d=&#34;M656.467 390.642A197.251 197.251 0 0 0 684 399c19.697 4.456 39.206 5.784 54.604 5.91&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path246&#34; d=&#34;M661.344 361.324c15.483-2.518 33.125-5.21 49.656-7.324 10.928-1.397 20.07-2.376 27.632-3.058&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path248&#34; d=&#34;M790.5 332.906c10.66 1.278 25.827 3.665 46.5 8.094 18.188 3.896 37.5 8.701 54.667 13.224&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path250&#34; d=&#34;M790.5 351.302c12.893 1.19 31.552 3.03 55.5 5.698a4673.655 4673.655 0 0 1 44.074 5.14&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path252&#34; d=&#34;M790.5 368.85c10.896.49 26.428.97 47.5 1.15 17.229.148 35.346.072 51.656-.09&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path254&#34; d=&#34;M790.5 387.176c10.66.184 25.827-.227 46.5-2.176 17.753-1.673 36.577-4.2 53.431-6.752&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path256&#34; d=&#34;M790.5 406.004c8.688-.352 20.783-1.71 37.5-5.004 20.365-4.014 43.658-10.127 64.04-15.94&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;line258&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M910.739 398.702l-109.614 96.306&#34;/&gt;&lt;path id=&#34;line260&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-width=&#34;3&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#Ball_Marker)&#34; d=&#34;M944.546 522v31.613&#34;/&gt;&lt;path id=&#34;path262&#34; d=&#34;M930.692 411.825C928.532 421.438 927 431.58 927 441c0 .312.002.62.005.928&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path264&#34; d=&#34;M969.336 456.936C970.98 452.417 972 447.14 972 441c0-7.3-1.44-15.032-3.66-22.616&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path266&#34; d=&#34;M982.517 344.834c4.9-1.734 10.375-3.373 16.483-4.834 8.493-2.032 17.412-3.532 26.252-4.632&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path268&#34; d=&#34;M989.19 363.346c5.713-.48 11.982-.938 18.81-1.346a979.805 979.805 0 0 1 17.135-.868&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path270&#34; d=&#34;M987.19 383.398A262.34 262.34 0 0 0 998.546 385c8.583 1.027 17.621 1.721 26.582 2.176&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path272&#34; d=&#34;M978.126 398.958c5.838 2.946 12.603 5.704 20.42 8.042 8.598 2.572 17.651 4.39 26.627 5.656&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path274&#34; d=&#34;M967.806 407.534c7.737 8.217 17.798 16.273 30.74 22.466 8.63 4.13 17.718 7.038 26.727 9.05&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34;/&gt;&lt;path id=&#34;path276&#34; d=&#34;M978.913 339.946a104.175 104.175 0 0 0 4.633-6.946c7.767-12.714 12.626-26.688 15.601-38&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;path id=&#34;line278&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1154.999 333.155l59.101.153&#34;/&gt;&lt;path id=&#34;line280&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1154.999 360.155l59.101.153&#34;/&gt;&lt;path id=&#34;line282&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1154.988 387.465l59.112.458&#34;/&gt;&lt;path id=&#34;line284&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1155 414h59.1&#34;/&gt;&lt;path id=&#34;line286&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1155 441h59.1&#34;/&gt;&lt;circle id=&#34;circle288&#34; r=&#34;45&#34; cy=&#34;369&#34; cx=&#34;617&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-checkcontext&#34; /&gt;&lt;circle id=&#34;circle290&#34; r=&#34;45&#34; cy=&#34;369&#34; cx=&#34;617&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;355&#34; x=&#34;586&#34; id=&#34;text292&#34;&gt;&lt;tspan id=&#34;tspan294&#34; textLength=&#34;34.014&#34; y=&#34;366&#34; x=&#34;599.993&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Check&lt;/tspan&gt; &lt;tspan id=&#34;tspan296&#34; textLength=&#34;41.355&#34; y=&#34;380&#34; x=&#34;596.322&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Context&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect298&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-beliefbase&#34; d=&#34;M581 135h72v72h-72z&#34;/&gt;&lt;path id=&#34;rect300&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M581 135h72v72h-72z&#34;/&gt;&lt;text y=&#34;140&#34; x=&#34;586&#34; id=&#34;text302&#34;&gt;&lt;tspan id=&#34;tspan304&#34; textLength=&#34;60.029&#34; y=&#34;151&#34; x=&#34;586.985&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;Beliefbase&lt;/tspan&gt;&lt;/text&gt;&lt;circle id=&#34;circle306&#34; r=&#34;45&#34; cy=&#34;171&#34; cx=&#34;769.5&#34; class=&#34;svg-agentcycle-unify&#34; fill=&#34;#dfd&#34;/&gt;&lt;circle id=&#34;circle308&#34; r=&#34;45&#34; cy=&#34;171&#34; cx=&#34;769.5&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;164&#34; x=&#34;738.5&#34; id=&#34;text310&#34;&gt;&lt;tspan id=&#34;tspan312&#34; textLength=&#34;56.027&#34; y=&#34;175&#34; x=&#34;741.486&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Unification&lt;/tspan&gt;&lt;/text&gt;&lt;circle id=&#34;circle316&#34; r=&#34;45&#34; cy=&#34;369&#34; cx=&#34;944.546&#34; class=&#34;svg-agentcycle-execution&#34; fill=&#34;#dfd&#34;/&gt;&lt;circle id=&#34;circle318&#34; r=&#34;45&#34; cy=&#34;369&#34; cx=&#34;944.546&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;362&#34; x=&#34;913.546&#34; id=&#34;text320&#34;&gt;&lt;tspan id=&#34;tspan322&#34; textLength=&#34;52.699&#34; y=&#34;373&#34; x=&#34;918.196&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Execution&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect324&#34; fill=&#34;#fff&#34; d=&#34;M972 250h63v45h-63z&#34;/&gt;&lt;path id=&#34;rect326&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M972 250h63v45h-63z&#34;/&gt;&lt;text y=&#34;258.5&#34; x=&#34;977&#34; id=&#34;text328&#34;&gt;&lt;tspan id=&#34;tspan330&#34; textLength=&#34;56.033&#34; y=&#34;269.5&#34; x=&#34;977.15&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Execution&lt;/tspan&gt; &lt;tspan id=&#34;tspan332&#34; textLength=&#34;42.012&#34; y=&#34;283.5&#34; x=&#34;982.494&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;Statistic&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;rect334&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-plans&#34; d=&#34;M972 120h63v102h-63z&#34;/&gt;&lt;path id=&#34;rect336&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M972 120h63v102h-63z&#34;/&gt;&lt;text y=&#34;125&#34; x=&#34;977&#34; id=&#34;text338&#34;&gt;&lt;tspan id=&#34;tspan340&#34; textLength=&#34;28.676&#34; y=&#34;136&#34; x=&#34;990.829&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;Plan&lt;/tspan&gt; &lt;tspan id=&#34;tspan342&#34; textLength=&#34;40.682&#34; y=&#34;150&#34; x=&#34;983.159&#34; font-weight=&#34;700&#34; font-size=&#34;12&#34;&gt;Library&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path344&#34; d=&#34;M1044 324h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; /&gt;&lt;path id=&#34;path346&#34; d=&#34;M1044 324h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;326&#34; x=&#34;1040&#34; id=&#34;text348&#34;&gt;&lt;tspan id=&#34;tspan350&#34; textLength=&#34;16.008&#34; y=&#34;337&#34; x=&#34;1086.996&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path352&#34; d=&#34;M1044 351h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; /&gt;&lt;path id=&#34;path354&#34; d=&#34;M1044 351h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;353&#34; x=&#34;1040&#34; id=&#34;text356&#34;&gt;&lt;tspan id=&#34;tspan358&#34; textLength=&#34;16.008&#34; y=&#34;364&#34; x=&#34;1086.996&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path360&#34; d=&#34;M1044 378h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; /&gt;&lt;path id=&#34;path362&#34; d=&#34;M1044 378h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;380&#34; x=&#34;1040&#34; id=&#34;text364&#34;&gt;&lt;tspan id=&#34;tspan366&#34; textLength=&#34;16.008&#34; y=&#34;391&#34; x=&#34;1086.996&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path368&#34; d=&#34;M1044 405h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; /&gt;&lt;path id=&#34;path370&#34; d=&#34;M1044 405h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;407&#34; x=&#34;1040&#34; id=&#34;text372&#34;&gt;&lt;tspan id=&#34;tspan374&#34; textLength=&#34;16.008&#34; y=&#34;418&#34; x=&#34;1086.996&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;path376&#34; d=&#34;M1044 432h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;#dfd&#34; class=&#34;svg-agentcycle-action&#34; /&gt;&lt;path id=&#34;path378&#34; d=&#34;M1044 432h102a9 9 0 1 1 0 18h-102a9 9 0 1 1 0-18z&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;/&gt;&lt;text y=&#34;434&#34; x=&#34;1040&#34; id=&#34;text380&#34;&gt;&lt;tspan id=&#34;tspan382&#34; textLength=&#34;16.008&#34; y=&#34;445&#34; x=&#34;1086.996&#34; font-weight=&#34;500&#34; font-size=&#34;12&#34;&gt;act&lt;/tspan&gt;&lt;/text&gt;&lt;path id=&#34;line384&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M1003.5 250v-18.1&#34;/&gt;&lt;path id=&#34;line386&#34; fill=&#34;none&#34; stroke=&#34;#000&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; marker-end=&#34;url(#FilledArrow_Marker)&#34; d=&#34;M972 160.096l-35.645-12.338&#34;/&gt;&lt;/svg&gt;&lt;/p&gt;

&lt;h3 id=&#34;perceiving-messaging&#34;&gt;Perceiving &amp;amp; Messaging&lt;/h3&gt;

&lt;p&gt;The LightJason AgentSpeak(L++) structure does not distinguish between &lt;em&gt;messages&lt;/em&gt; and &lt;em&gt;perceiving&lt;/em&gt;, we reduce this concept to two elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;triggers&lt;/strong&gt; which are &lt;em&gt;pushed data&lt;/em&gt; for the agent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;on-demand access&lt;/strong&gt; which is a component of the beliefbase to read knowledge on-demand during runtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All triggers will be cached, instantiate and execute in parallel during the cycle. During execution new incoming triggers will be stored inside the cache.
The execution can get access via unification to the beliefbase, so the beliefs can be unified during execution.
A statistic will count fails and successful runs of the plans. The &lt;em&gt;cost aggregation&lt;/em&gt; component allows to define for each action a cost value, named &lt;em&gt;score&lt;/em&gt;, which can be used by for an optimized execution.&lt;/p&gt;

&lt;h3 id=&#34;terms-and-literals&#34;&gt;Terms and Literals&lt;/h3&gt;

&lt;p&gt;The LightJason architecture does not implement all elements of a &lt;em&gt;logical programming language&lt;/em&gt;. We reduce the concept also, so that we can optimize the execution performance. We define two elements only:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;literals&lt;/strong&gt; which defines the logical literal with &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-negation&#34;&gt;negation&lt;/a&gt;, &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-functor&#34;&gt;functor&lt;/a&gt;, &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-values&#34;&gt;values&lt;/a&gt; and &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-annotation&#34;&gt;annotation&lt;/a&gt; list&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;raw terms&lt;/strong&gt; which defines a &lt;em&gt;wrapper&lt;/em&gt; around any &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-raw&#34;&gt;native Java object&lt;/a&gt; type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;svg id=&#34;literal&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;207 192 743 111&#34;&gt;&lt;g fill=&#34;none&#34;&gt;&lt;text transform=&#34;translate(274.48 206.72)&#34; fill=&#34;#000&#34;&gt;&lt;tspan class=&#34;svg-literal-negation svg-literal-storage&#34; font-size=&#34;20&#34; font-weight=&#34;500&#34; x=&#34;0&#34; y=&#34;19&#34; textLength=&#34;12&#34;&gt;~&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(545.063 206.72)&#34; fill=&#34;#000&#34;&gt;&lt;tspan class=&#34;svg-literal-values svg-literal-storage&#34; font-size=&#34;20&#34; font-weight=&#34;500&#34; x=&#34;.01&#34; y=&#34;19&#34; textLength=&#34;205.98&#34;&gt;(value(&lt;tspan class=&#34;svg-literal-raw&#34;&gt;5&lt;/tspan&gt;), time(&lt;tspan class=&#34;svg-literal-raw&#34;&gt;“12:00“&lt;/tspan&gt;))&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(760.698 206.72)&#34; fill=&#34;#000&#34;&gt;&lt;tspan class=&#34;svg-literal-annotation svg-literal-storage&#34; font-size=&#34;20&#34; font-weight=&#34;500&#34; x=&#34;.09&#34; y=&#34;19&#34; textLength=&#34;175.44&#34;&gt;[source(&lt;tspan class=&#34;svg-literal-raw&#34;&gt;“sensor 1“&lt;/tspan&gt;)]&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(293.563 206.72)&#34; fill=&#34;#000&#34;&gt;&lt;tspan class=&#34;svg-literal-functor&#34; font-size=&#34;20&#34; font-weight=&#34;500&#34; x=&#34;.46&#34; y=&#34;19&#34; textLength=&#34;240.8&#34;&gt;&lt;tspan class=&#34;svg-literal-view&#34;&gt;group&lt;/tspan&gt;/&lt;tspan class=&#34;svg-literal-view&#34;&gt;subgroup&lt;/tspan&gt;/&lt;tspan class=&#34;svg-literal-storage&#34;&gt;any-name&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;&lt;path stroke=&#34;#a5a5a5&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M765 235.125l171 .93m-390.667-.93h215.5m-468.5 0h243m-247.302.002l-19.406-.002M848.198 264v-28&#34;/&gt;&lt;text transform=&#34;translate(221.063 269.776)&#34; fill=&#34;#a5a5a5&#34;&gt;&lt;tspan class=&#34;svg-literal-negation&#34; font-size=&#34;16&#34; font-weight=&#34;500&#34; x=&#34;.032&#34; y=&#34;15&#34; textLength=&#34;61.936&#34;&gt;negation&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(388.563 269.776)&#34; fill=&#34;#a5a5a5&#34;&gt;&lt;tspan class=&#34;svg-literal-functor&#34; font-size=&#34;16&#34; font-weight=&#34;500&#34; x=&#34;.164&#34; y=&#34;15&#34; textLength=&#34;50.672&#34;&gt;functor&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(625.063 269.776)&#34; fill=&#34;#a5a5a5&#34;&gt;&lt;tspan class=&#34;svg-literal-values&#34; font-size=&#34;16&#34; font-weight=&#34;500&#34; x=&#34;.184&#34; y=&#34;15&#34; textLength=&#34;45.632&#34;&gt;values&lt;/tspan&gt;&lt;/text&gt;&lt;text transform=&#34;translate(810.198 269.776)&#34; fill=&#34;#a5a5a5&#34;&gt;&lt;tspan class=&#34;svg-literal-annotation&#34; font-size=&#34;16&#34; font-weight=&#34;500&#34; x=&#34;.064&#34; y=&#34;15&#34; textLength=&#34;75.872&#34;&gt;annotation&lt;/tspan&gt;&lt;/text&gt;&lt;path class=&#34;svg-literal-annotation&#34;stroke=&#34;#a5a5a5&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M414.063 264v-28m234 28v-28m-370.518-.874L270.084 264&#34;/&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/p&gt;

&lt;h3 id=&#34;beliefbase&#34;&gt;Beliefbase&lt;/h3&gt;

&lt;p&gt;The beliefbase is not a single element to store all facts of the agent. The beliefbase is a &lt;em&gt;tree structure&lt;/em&gt; to organize the agent knowledge. Nodes of this &lt;em&gt;knowledge tree&lt;/em&gt; can be shared over many agents or can be used by &lt;em&gt;on-demand unfification&lt;/em&gt;, so that the agent can perceive the environment in realtime. We split-up the beliefbase into three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;storage&lt;/strong&gt; a pysical or on-demand data structure to store / generate literals, which are defined by the &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-storage&#34;&gt;last element of the functor with negation, values and annotations&lt;/a&gt; only&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;view&lt;/strong&gt; a flyweight pattern to define a &lt;a href=&#34;#literal&#34; id=&#34;animate-literal-view&#34;&gt;path structure&lt;/a&gt; for organization of literals / knowledge, the different path elements are separated by a &lt;code&gt;/&lt;/code&gt;. The path structure can be defined for each agent individually, so equal literal objects can be addressed by different paths&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beliefbases&lt;/strong&gt; are a component to connect the &lt;em&gt;storage&lt;/em&gt; and the &lt;em&gt;view&lt;/em&gt; and generate trigger for the execution mechanism&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Knowledge Base</title>
      <link>https://lightjason.github.io/knowledgebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lightjason.github.io/knowledgebase/</guid>
      <description>&lt;p&gt;In this Section we provide basic knowledge helpful for understanding the theoretical concepts (and also the &lt;a href=&#34;https://lightjason.github.io/tutorials&#34;&gt;practical tutorials&lt;/a&gt;) of our framework.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;logicalprogramming&#34;&gt;Logical Programming&lt;/a&gt; for understanding the difference to imperative programming. Explanation of the basic concepts for using this paradigm to describe the agent behaviour&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;finitestatemachine&#34;&gt;Finite-State-Machine&lt;/a&gt; for understanding the runtime model of the agent behaviour&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;agent&#34;&gt;Finite-State-Machine &amp;amp; Logical Programming to an Agent&lt;/a&gt; to understand how we combine the parts into our agent definition&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;differencetojason&#34;&gt;Difference to Jason&lt;/a&gt; shows the main differences between &lt;a href=&#34;http://jason.sourceforge.net&#34;&gt;Jason&lt;/a&gt; and our framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;actions&#34;&gt;Actions&lt;/a&gt; explanation of all built-in actions&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>